subreddit,post_id,comment_id,comment_content,comment_score,comment_created_at,comment_author
programming,1jkf480,mjuwbln,"If you're linking the new features link the actual java documentation, rather than these watered down garbage reinterpretations

https://www.oracle.com/news/announcement/oracle-releases-java-24-2025-03-18/",71,2025-03-26 16:34:04,Worth_Trust_3825
programming,1jkf480,mjur072,No longer the students need to dance their fingers typing public static void main string args,57,2025-03-26 16:08:11,__Blackrobe__
programming,1jkf480,mjw5oc7,">game changing


lmao",21,2025-03-26 20:12:10,BlueGoliath
programming,1jkf480,mjvs09h,"downvoting for not even getting basic example right smh
```java
void main() {
    var name = readln();
    var message = “Hello, World and “ + name;
    println(name);
}
```",10,2025-03-26 19:05:23,ryo0ka
programming,1jkf480,mk2t0hf,"Awesome, I just added support in compiler explorer for java 24",1,2025-03-27 21:35:18,12destroyer21
programming,1jkf480,mjxe3ku,"Amazing, catching up with language features from the 2000s!",-8,2025-03-26 23:54:31,UloPe
programming,1jz0umd,mn837vg,Stark contrast with the « for dummies » brand,2,2025-04-15 12:42:57,My_reddit_account_v3
programming,1jz0umd,mnn7xf7,Mad man :-),1,2025-04-17 20:11:18,Jabes
programming,1jz0umd,mn3uxsu,"Seems more like tracking (as in Trackerz) rather than programming.  

Still neat but probably better suited to r/edmproduction than r/programming",-6,2025-04-14 18:49:20,church-rosser
programming,1jki3vg,mjwgux6,"The most important qualities:

- Lots of title-case subheadings
- Bulletpointed lists with bolded leading phrases
- Em-dashes
- A complete lack of meat on the bones; lots of structure and fluffy details without reference to the hard problems of engineering or technical documentation",14,2025-03-26 21:02:32,Saint_Nitouche
programming,1jki3vg,mjvpjxc,How?,2,2025-03-26 18:53:30,LifeWithoutAds
programming,1k534h4,mof5k4z,yet they say we should work at the office,16,2025-04-22 12:34:17,markiiitu
programming,1k534h4,moi3j1o,Imma take a wild wild guess. Two words: “proper logging.”,1,2025-04-22 21:29:29,this_knee
programming,1jw1n7k,mmevdr0,Props for the approach here. I've seen someone explain \*what\* the Y Combinator is lots of times. Explanations for \*why\* I would care or need it are less common or satisfying. This one seems pretty good.,12,2025-04-10 16:31:12,thicket
programming,1jw1n7k,mmh1umi,"Very cool!

For those interested in the topic, [code_report](https://www.youtube.com/@code_report/featured) on youtube has a lot of videos about combinators (including short videos using combinators to solve leet code style problems and longer deep dives into theory)",3,2025-04-10 23:06:20,Sufficient_Meet6836
programming,1jw1n7k,mmfqvl7,"This post took me back to college in a big way. It might be my age but I did feel like I lost some details at a certain point. I am not a python dev. So I am a bit lost on the lambda keyword. The examples around currying look, to me, the same as just writing it recursively. It has been almost 20 years since I’ve written lisp so I’m assuming by using the lambda keyword you get tail recursion or late evaluation (how old am I…)",2,2025-04-10 19:04:03,razialx
programming,1jw1n7k,mmizub8,"At the end when you note that function arguments are evaluated eagerly, could you perhaps use functools' partial() to get around the problem?",1,2025-04-11 07:39:27,ADavison2560
programming,1jw1n7k,mmozzji,"One of my favorite articles on Y Combinator and implementing fizz buzz: https://tomstu.art/programming-with-nothing

Presentation: https://www.youtube.com/watch?v=FITJMJjASUs",1,2025-04-12 06:31:35,amirrajan
programming,1jozcbn,mkvjdxk,How does this compare to optic?,5,2025-04-01 16:09:49,brianjenkins94
programming,1jozcbn,mkxna1m,"Automating API documentation is incredibly valuable, but I've found a complementary approach is structuring the documentation in a MECE way (Mutually Exclusive, Collectively Exhaustive).

The challenge with automated docs is often that they capture *what* happens but not *why* or the conceptual model behind the API. We've been using a hybrid approach where automation handles the technical details, while we maintain a MECE framework for the conceptual structure.

This significantly improves both maintainability and comprehension, especially when API behavior changes but the underlying concepts remain the same. The documentation doesn't just show the endpoints but helps developers understand the mental model.

If you're interested in this approach, I wrote about applying MECE principles to technical documentation: https://medium.com/@jlcases/mece-for-product-managers-the-forgotten-principle-that-helps-ai-to-understand-your-context-9addb4484868",3,2025-04-01 22:45:56,traderprof
programming,1jozcbn,mkvshqv,"Automation is valuable, but without a MECE (Mutually Exclusive, Collectively Exhaustive) structure, automatically generated documentation may have critical conceptual gaps. I shared some thoughts on how MECE principles can transform documentation for APIs and other systems in this article: https://medium.com/@jlcases/mece-for-product-managers-the-forgotten-principle-that-helps-ai-to-understand-your-context-9addb4484868",-1,2025-04-01 16:56:47,traderprof
programming,1jnp11w,mklizyd,Using Lisp for NLP is certainly a choice. Fun idea.,4,2025-03-30 23:03:36,itijara
programming,1jnp11w,mkod6uj,I initially read this as Uncovering Carrot Biases ...,0,2025-03-31 12:45:00,shevy-java
programming,1k2b0rb,mnsya29,"> Note that these numbers are not expected to get significantly higher since a lot of these tests are not meant to be working in GPUs anyway

No broken windows!

Sounds like there is a huge opportunity to tag the ones that are expected to never work and exclude them. That would increase feedback on the remaining ones.",4,2025-04-18 18:45:18,Pyrolistical
programming,1k0owr6,mngatxn,"The question is all about how to balance bad reporting against hiding of data.  Where should the balance be set?

Allowing anybody to report a CVE gives too much noise and makes it hard to understand and find what is important.  Not to mention false reports or incorrect attribution of issues.  But, maintainers - especially corporations selling a product - are incentivized to hide CVEs.  I am in agreement that far.

But licensing and significant personal exposure to liability is not the right way to change that conflict.  

The pilots model - where there are severe penalties for failing to report incidents and no direct repercussions for self-reporting - would be a better one to emulate; though licensure for software engineering still doesn't make sense.  There's too much useful creations and contributions made by amateurs as well as by professionals that would never choose to certify or work under somebody with a certification.",16,2025-04-16 18:29:05,exjackly
programming,1k0owr6,mnho0t8,"Laughing that you managed to write an article about malware attributes and not mention ATT&CK. Like it sucks and it’s annoying, but that’s literally what it’s for. ",3,2025-04-16 22:44:20,usernamedottxt
programming,1k0owr6,mo9lz10,"How would licensing even work?

> We make certain types of software require a PSWE as an Engineer of Record.

Okay. Let's talk about Curl. Daniel Stenberg lives in Stockholm, Sweden. Curl is used worldwide, in over 200+ countries:

 1. Do you expect Daniel to obtain a PSWE license in over 200 countries; or more, if it's some large country it's a ""local"" certification?
 2. Or do you expect 200+ countries to come together and form a PSWE body?

I don't necessarily mean the _idea_ of PSWE is bad, but honestly, it seem wholly impractical.

I can't wait to see China & the US at the negotiation tables to define the rules of a PSWE body right now, in the middle of a tariffs war.",3,2025-04-21 15:00:26,matthieum
programming,1k0owr6,mnk9yye,"So, mixing the EU's CRA with engineer licensing? That sounds ideal, but unfortunately companies will lobby against the CRA, and programmers will help them lobby against the licensing.",1,2025-04-17 10:47:23,nelmaloc
programming,1k0oste,mniurp4,"I've seen this floating around a lot. I recognize a bunch of folks are working hard on a product they think is cool. It seems like they raised some VC money which is great for them. 


However there seems to be a big media push but not a clear actual product/ product market fit happening here. Some of their material makes it's seem like they are trying to be a database product but their SQL surface area is extremely lacking. No aggregate functions besides count. Limited expression support. No real useful functions. No CTEs. Only a handful of data types. 

But then they turn around and try and offer like a ""cloud for game developers"" they claim scalability and performance but I didn't see any concrete numbers. They claim their cloud offers uptime guarantees and SLAs but they are pretty handwaved. 

I'm kinda confused exactly what they're trying to be. 

I'm my mind I kinda see where they are going and it kinda goes something like this: 

* I have a bunch of game clients that want consistent state! 
* This sounds like ""transactions""
* Hey databases are transactional! Let's use a database
* Oh I can't really express the kinda things I want at the frequency I want using a client driven SQL interface 
* What if we put the game logic in the database as a bunch of user defined wasm functions! 
*  now my game clients can just query the state they need! 

 This sounds more negative than I intended. If this is solving their use case then great! I guess Id like to see some clarifications on the thing they are building. Are you trying to be a database? A cloud hosted database like thing?  Why would I trust uploading my games IP to your cloud service? Why would I trust it to be reliable or supported when the game they are building this for hasn't launched yet?",24,2025-04-17 03:01:22,coterminous_regret
programming,1k0oste,mni91pu,"It has been mentioned before but it sounded sketch the last time & does this time around as well. An account that very recently got active after 5 years of inactivity, a blog which also just started a month ago, and this whole post reads like a marketing ploy. For example:

>Their first release is going to be an MMORPG known as BitCraft, which is still in its development and testing phase, but has millions of players signed up.

But there seems to be no such official numbers, in fact the only thing which can be done as far as signing up seems to be to wish list on steam, and those numbers are far from millions. And the link to the MMO webpage is a referral link ( https://bitcraftonline.com/?ref=blog.slamdunk.software ), which also leads me to believe that this blog poster is in fact associated & just trying to market.",29,2025-04-17 00:48:12,Sairony
programming,1k0oste,mngf4wq,"> SpacetimeDB has enabled us to build our massively multiplayer game, BitCraft, with a small team. Its entire backend, including all game logic, real-time player positions, and all persistent state, is implemented as a SpacetimeDB module.

what the actual fuck",24,2025-04-16 18:51:06,shittalkerbot
programming,1k0oste,mnlcht8,"I saw them at GDC, they were pretty upfront about everything and had Bitcraft on demo. Seems great for small devs who want an all in one solution, I imagine large devs that already have cloud services setup won’t be interested.",3,2025-04-17 14:42:40,Xryme
programming,1k0oste,mnitf4h,"Feels kinda like Supabase but for games? Well, quite different in a few fundamental ways but there's some similarities in the value proposition.",2,2025-04-17 02:52:35,pizzapiepeet
programming,1k0oste,mnfqxs8,This is super cool.  Thanks for the article!,1,2025-04-16 16:53:50,Scyth3
programming,1jwibq5,mmilmyk,Oracle should first get their pre quantum cryptography correct before moving on,41,2025-04-11 05:19:48,Jmc_da_boss
programming,1jwibq5,mmivyjc,"This is actually a good read, was not expecting that from Oracle.  I don’t know what the future is, but it is wise to prepare for the possibility that these do become real.  Having said that, [this](https://www.cs.auckland.ac.nz/~pgut001/pubs/bollocks.pdf) is a fun read from a reputable skeptic.",6,2025-04-11 06:58:51,ScottContini
programming,1jwibq5,mmj88mc,"Post-quantum landed in OpenSSL 3.5 LTS. Thus it's a thing for everyone this year, regardless of actual quantum computing advancement",3,2025-04-11 09:09:47,xebecv
programming,1jwibq5,mmirzwx,"Oh good, is the hype wheel finally turning onto a new cycle, leaving LLMs behind for quantum computing? I guess we haven't had a quantum computing hype cycle for a while, could be fun to have one again.",1,2025-04-11 06:18:45,syklemil
programming,1js6ipu,mlkdcvf,Sounds nice. Is the source available to follow along?,3,2025-04-05 17:00:10,biehl
programming,1js6ipu,mlm4i5b,"Out of curiosity, why did you delete your previous post about Krep? Especially given there was some excellent feedback about errors and bugs from some well known individuals?

https://se.reddit.com/r/programming/comments/1jpk8sw/krep_a_blazingly_fast_string_search_utility/

Will the same happen to this post if constructive comments are proffered?",1,2025-04-05 23:01:54,sumwheresumtime
programming,1js6ipu,mlr6trn,I still want a universal editor!,1,2025-04-06 20:23:45,shevy-java
programming,1js6ipu,mlknald,I don't know what subs allow devlogs and I don't think it's a good idea to post here every week (or is it?) I created a sub to post in /r/boldedit/,1,2025-04-05 17:54:11,levodelellis
programming,1jl4w0i,mk22vq8,"I like a lot of the stack's ideology - server side rendering, HTMX instead of reactive components, AlpineJS instead of some do-it-all JS package. That being said, writing HTML inside rust with limited inteli-sense and having to compile when playing around with layout/content seems like a masochistic development process for anything other than super simple CRUD sites.

I see a stack of contradictions: simplicity is good VS let's compile HTML, find errors at compile time VS rendering generated from macros, focus on the essentials VS seemingly painful development pipelines. Even with me not ever wanting to use this stack myself, it's great to see people looking at alternative ways to escape the local minima web dev finds itself in, and looking at ways to make web pages load faster - respecting the users time.",23,2025-03-27 18:41:27,AHorridge93
programming,1jkg7bl,mjwhbkn,"Mistitled article. It should be:  
  
Collapse OS: Operating System for the end of the world.",25,2025-03-26 21:04:38,gordonv
programming,1jkg7bl,mjysx7f,"Let me real: A post apocalyptic computer will be whatever shit laying around still works. 

I’d love to think some old Commodore 64’s will be humanity’s computing saviour… but for fucks sake it’s literally gonna be whatever shit is laying around close to whatever nerd is alive and laying around who can figure out how the fuck to get anything working.",13,2025-03-27 05:29:43,Liquid_Magic
programming,1jkg7bl,mjwyb23,"Paywalled. I already know about these anyway, being something of a FORTH dabbler with Pico2 / Mecrisp FORTH.",9,2025-03-26 22:30:18,bravopapa99
programming,1jkg7bl,mjw59pm,"Isn't there a more C-like doom-friendly language? Please, no Forth, I'd rather get into the path of the asteroid and/or missile to get it over with faster.",11,2025-03-26 20:10:14,Zardotab
programming,1jkg7bl,mjxir8z,"Wired, stop spamming your articles to /r/programmjng.",15,2025-03-27 00:20:34,dex206
programming,1jkg7bl,mjwjopr,"I wrote a lot of Forth code, back in the day. The end of the world would be preferable to having to write more of it.",9,2025-03-26 21:15:15,gofl-zimbard-37
programming,1jkg7bl,mjuzsgw,[deleted],2,2025-03-26 16:50:48,N/A
programming,1jkg7bl,mjyv72d,Weathering software winter,2,2025-03-27 05:51:42,callmesun7
programming,1jkg7bl,mjuxo5o,"Once I started thinking about the apocalypse, it was hard to stop. An unsettling encounter with the doomsday clock that hangs over New York City’s Union Square got me frantically searching WikiHow for survival tips. I soon found my way to the doomsday writings of a Canadian programmer named Virgil Dupras. He believes the collapse of civilization is imminent and that it will come in two waves.

First, global supply chains will crumble. Modern technology relies on a delicate web of factories and international shipping routes that are exquisitely vulnerable to rapid climate change. The iPhone uses memory chips from South Korea, semiconductors from Taiwan, and assembly lines in Brazil and China. The severing of these links will, Dupras says, catalyze total societal breakdown.

The second part will happen when the last computer crashes. The complexity of modern hardware means it’s nearly impossible to repair or repurpose, and without the means to make new devices, Dupras believes there will be a slow blackout—less bang, more whimper. Routers die. Servers take their last breath. Phones crap out. Nothing works.

Except Collapse OS. Lightweight and designed to run on scavenged hardware, it’s Dupras’ operating system for the end of the world.

Read the full story: [https://www.wired.com/story/forth-collapse-os-apocalypse-programming-language/](https://www.wired.com/story/forth-collapse-os-apocalypse-programming-language/)",5,2025-03-26 16:40:37,wiredmagazine
programming,1jkg7bl,mjwjlys,"I wrote a lot of Forth code, back in the day. The end of the world would be preferable to having to write more of it.",5,2025-03-26 21:14:55,gofl-zimbard-37
programming,1k5bk2y,mokiowm,"You need to actually tie down what “constant expression” means in the intro, because you’ve kinda breezed past an important distinction, and as you’ve chosen to interpret it (i.e., all ways or none), it’s not particularly useful. E.g., you can’t use these to check that an array won’t end up as a VLA, or that something is sufficient for a bitfield or bit-int or `_Alignas` width or enum constant, or that something suffices for static initialization, and all of these are distinct from the sorts of constant expressions that can be consumed by `#if`—but even there, rules vary (e.g., expansion of macro incl. `defined`, use of `sizeof` [supp. by Borland]).

Your take on `__builtin_constant_p` may or may not be correct, for example. Early versions of `__builtin_constant_p` yielded nonzero iff their arguments were actually constant expressions, in the ISO `constexpr` sense. This was the case for GCC prior to 3.0ish, early Clang, and either older or all ICC/ECC/ICL.

Newer compilers, however, mostly yield nonzero if the compiler can see the value of something at compile time, which is a considerably laxer constraint and one that can enter your optimizer into causal cycles with itself. Thus, for example, you may get varying results for

	puts(__builtin_constant_p((const int){0}) ? ""yes"" : ""no"");

or if you apply it on the parameter of an inlined function. Also, the built-in functions treated as constant expressions vary *widely* depending on version and line, with both GCC and Clang migrating things to constexpr without warning and as is possible.

Also, `__builtin`s should not *generally* be treated as GNU-dialect broadly, but merely as features of some GNU-dialect compilers, which tend to slice and dice their preferred GCC manual version however they please. There’s a handful of other compilers that support GNU extensions (TI, IBM, Oracle, Metrowerks, Arm, Dignus, Keil), but not necessarily `__builtin_constant_p`, and they might reasonably implement it in either way, depending upon when in GCC history the compiler programmers started compat work, what the compiler’s actual needs are, and whether anything has compelled the newer, touchier behavior. There’s not even a requirement that `__builtin_constant` itself yield a constant expression, which is outside its intended use case of choosing between inlined and uninlined code, or between assembly sequences.

And then, you assume that 0 can be casted to whatever type you test, which is …adventurous, I guess. Also note that support for `__builtin_constant_p` does not at all imply support for `__attribute__((error))` or vice versa, and `__attribute` deserves to have its trailing `__` for consistency with the rest of the world. (Hell, why not just `attribute`, GCC 2 supported that!)

Moving back to your first thing, if C23 features (disregard Clang, it lies about C23 support) are a thing, you may as well make use of `constexpr`, which might actually come closer to what you want. Your code is flatly invalid for vacuous objects like `struct {}` or ZLAs, which aren’t prohibited by C (supported by most compilers).

The `static_assert` thing is kinda pointless; you could just as easily use something like `struct {unsigned foo : 1+0*!(x);}`. And a note of caution: MSVC is a goddamn mess for this one. All MSVCs in all modes from at least `_MSC_VER == 1900` on support `static_assert` as a keyword, whether or not that’s a good idea (mostly not, but helluva jump on C23); this is despite early MSVC “C11” modes not supporting `_Static_assert` at all. However, AFAIK unless in a C17 (or atl post-“‘“‘conformance’”’” push) mode specifically, you can’t just drop a struct/union/enum definition anywhere—anything in parens is a no-no, so no `sizeof(…)` or casts either. You *may* be able to abuse `#pragma warning` to enable it, but IDK offhand when that started to be a thing.

The `+0` thing makes me squirm—if all you care about is whether ICEs work, then the Linux kernel trick with null pointers (or rather, something less dependent on `sizeof` things being >1) will suffice. `+0` will fail for pointers to incomplete or function type, for example—e.g., `char (*)[]` or `struct untold *`—but those are constant enough for (e.g.) `static` initializers (which `static_assert` is too strict for). Comma operator is fraught, because nothing requires that it work outside block scope, even in a `typeof`.

Another issue with anything that duplicates its argument is token-space blowup, but whatever, that’s macros for you. Probably I’d’ve gone with a variadic macro for these where possible. because `{[]}` don’t guard the same as `()`, and so something like `*(int[]){0,}` would break thesw. Of course, then you need to split things if you need GNU89 or C89 support, but it seems we’ve assumed that cost to begin with.

Your compound literal thing is semi-pointless at block scope, because compound literals predate C99 by quite a bit. VLA comp-lits aren’t permitted in the standard because it would be in-place init, or at file scope becaif your compiler isn’t obscenely permissive (GCC may be), but GCC permits in-place init *and* both it and Clang will glibly fold VLA to CLA for you! So something like `((void)0,1)` may actually pass, even if `-Werror=vla` is enabled!

Another issue is that compound literals can’t appear *at all* in a static-storage local declaration, without slipping a storage qualifier in (which is rarest C23).

I also note that the maximum array size depends on context—a static variable, local variable, TLS variable, typedef, and parameter variable might all have different CLA size limits, and VLA size limits might effectively be anywhere under min {`PTRDIFF_MAX`, `SIZE_MAX`}.

The enum thing has the MSVC limitation. Also, you can produce `_Pragma`/`__pragma` inside `struct {}`s (after `{` or `;`), so if you use a struct *and* enum, you can potentially get a bit closer. But in practice, pragmas are at best a temporary one-off for warning suppression; if an `unused` or `maybe_unused` attribute won’t work, it’s probably best to find another approach.

Yeah, operator commas induce a sequence point (and can create syntactic ambiguity), which eliminates any possibility of constantness beyond GCC and Clang inadvisably V-to-CLA folding, and make it non-kosher to do anything at file scope.

That last thing about `error` being robust …absolutely not. No. LOLno. First of all, no attribute is. It’s like `#pragma`, but less tightly specified. Second, `error` and `warning` only actually trip if a dependency would be generated, and they’re only really supported by GCC, Clang, and IntelC from latter-days C1x on.

But none of this is robust, really—you bounce between treating rules-per-standards as hard and fast, but most aren’t, especially early on, and even within the standards, consistency is a mess.",10,2025-04-23 06:59:59,nerd4code
programming,1k5bk2y,mol60ef,This reminds me a lot of C++ around 2 decades ago when type traits & generic programming overall was starting to become a thing.,2,2025-04-23 10:58:03,Sairony
programming,1k1nmh4,mnnj3k8,[deleted],10,2025-04-17 21:06:08,N/A
programming,1k1nmh4,mns81cl,I work in HFT and use things like this daily. I like how you defend all your considerations in your blog post - they are all spot on. Nice work,2,2025-04-18 16:34:53,mgoblue5453
programming,1jv1z5c,mm6ov2t,"Gained a good bit of traction on /r/commandline and thought this sub may enjoy it.

[remind](https://dianne.skoll.ca/projects/remind/) is a calendar/alarm program which blows most other calendars out of the water with its configurability

(I am not the author of the blog post)",3,2025-04-09 09:54:45,mr-figs
programming,1jv1z5c,mm91e2s,RemindMe! 1 day,0,2025-04-09 17:59:47,SaltineAmerican_1970
programming,1jlv3dr,mk6y208,JEP 483 is a great step toward speeding up JVM startup time—something that’s been a pain point for a while. Ahead-of-Time class loading feels like one of those “why didn’t we always do it this way?” ideas. Curious to see how this will impact real-world microservices. Anyone already testing it?,4,2025-03-28 14:48:19,tomasartuso
programming,1jlv3dr,mkbwxod,"Nice that it's possible but the experience seems to be much crappier then simply using a language which does not have this problem.


Who is going to record and keep an up to date list of classes, not really useful for most of the cases.",0,2025-03-29 09:18:37,bytesbits
programming,1jip5ue,mjgt9r2,"> You came into work today pretty happy.

Yeah, you lost me there. ^jk",17,2025-03-24 12:22:23,BaronOfTheVoid
programming,1jip5ue,mjguvb9,My favorite part of this is that it doesn't answer the question. The post just ponders the dread that is working on reliable software.,10,2025-03-24 12:33:35,itijara
programming,1jip5ue,mjil4x5,"it was actually kind of an enjoyable read, then it just ended and I remembered why I don't read blogs",5,2025-03-24 17:58:23,doyouknowbobby
programming,1jip5ue,mjh0c9j,">***How to handle working software***

Hmmm ....

In theory: (like with any rare moments of bliss) don't touch it, don't do anything but lean back and enjoy it while it lasts ...

In practice: Unfortunately there are always some guys (higher above, next to and also including me) who can't resist the urge to constantly ""(im)prove"" something ...",4,2025-03-24 13:09:18,Miserable-Yogurt5511
programming,1jv6aiu,mm9fnak,This kinda describes a lot of the senior dev team members where I work,5,2025-04-09 19:08:56,AshKetchupppp
programming,1k11l0o,mnje1lg,basically a raid on network level. you increase throughput but also latency,3,2025-04-17 05:29:50,SlovenianTherapist
programming,1k11l0o,mniki4i,"* [design notes](https://github.com/deepseek-ai/3FS/blob/main/docs/design_notes.md)
* [deployment](https://github.com/deepseek-ai/3FS/blob/main/deploy/README.md)",2,2025-04-17 01:56:56,self
programming,1k11l0o,mnrmq8n,"I'm curious why they had to roll their own vs use something open source.

I mean, I can guess why but would be an interesting story.",1,2025-04-18 14:48:02,Lame_Johnny
programming,1jxcyax,mmqrds9,"> One may notice that there’s an additional cost in handling a closure call. However, with a sufficiently big amount of iterations the overhead will be dampened and won’t be that significant.

What? Isn't the closure overhead something you have to pay on each and every iteration, since you call the closure on each and every iteration?",4,2025-04-12 15:05:39,somebodddy
programming,1jxcyax,mmqrqsa,"How come in the `LuaC (d)` column the `add` method is the slowest? How come simple addition is slower than square root and trigonometry?

Is it because of its high `gF/sF`? Does getting/setting fields from Lua tables really that slow?",2,2025-04-12 15:07:34,somebodddy
programming,1jxcyax,mnif7at,Lua is awesome ❤️,2,2025-04-17 01:25:16,Limp_Day_6012
programming,1jxcyax,mmvf05n,"I think Lua is mostly used for game development like Roblox and FiveM, the game engine that run the Lua(u) code is just very well optimized for the implementations on top of the native functions, especially the implementation of Roblox's LuaU.",1,2025-04-13 09:53:17,UniversityMiddle3655
programming,1jw9x06,mmj3eo9,Click on this link for an easy way to trigger the blog authors beep: http://susam.net:8000,4,2025-04-11 08:17:34,Skaarj
programming,1jw9x06,mmj873m,"> Much of the traffic seems to have come from persistent client loops constantly connecting to my beeper loop.

That’s what I would have done if I was if I was looking for something silly to waste time with.",3,2025-04-11 09:09:18,ScottContini
programming,1jvx8wu,mmdsn38,"I love games that teach you actual knowledge! And it looks a bit like SpaceChem, which I love, great job!",2,2025-04-10 13:13:30,Herobrine20XX
programming,1jvx8wu,mn17ztd,"I'm a little lost. I see that you're playing a game, but I know nothing about quantum math. physics or computing, and don't know how this game relates to it. Is there somewhere I can read up on it?

Also, please add your game link to your video description on yt. It's a small thing, but I think it makes the discovery easier",1,2025-04-14 09:15:09,Direct-You4432
programming,1jvb0ja,mmaq1pt,"Some good points in here, I’d add understanding the full underlying infrastructure including networking. At least at some level, each is so deep. Most devs I know understand their code really well, but not the services it connects to. Once it’s deployed to production, they don’t understand all the parts before and after a request reaches their code. Then when there are problems, they are in the dark as to where to look based on the issue.",4,2025-04-09 23:08:50,71678910
programming,1jvb0ja,mmb6n4q,"Tl;Dr they have more time, unlimited attention spans, and are more smart than you",5,2025-04-10 00:46:08,Deathnote_Blockchain
programming,1jual0g,mm2150a,"I think I may have a guess regarding the channels behavior.

Consider the following Go code:

    ch := make(chan int, 0)
    ch <- 42

This code blocks forever. The channel has a zero-sized buffer so it cannot place the value in the buffer - it has no choice but to wait for some other Goroutine which wants to receive from the channel so that it can hand the value directly to it. But there is no such Goroutine - we never launch one - so it waits forever.

I suspect Zero channels behave similarly. They don't have a buffer to queue the value in, so they have to wait for a receiver - but in their case, having a receiver is impossible because the channel is not actually real. So they wait forever for this conceptually impossible receiver.

As for why receiving blocks forever - it's similar. It waits for someone to send a value on the channel, but since it's a zero channel - sending a value on it is impossible, so it waits forever.

Basically it's like trying to communicate over a pair of cups that **don't** have a string connecting them.",6,2025-04-08 16:15:20,somebodddy
programming,1jual0g,mm185x7,"Python's default value is not `None`. It's `NameError`:

    $ python -c ""
    > foo: int
    > foo
    > ""
    Traceback (most recent call last):
      File ""<string>"", line 3, in <module>
        foo
    NameError: name 'foo' is not defined

Because of that, I'd put Python under the _No uninitialized values_. And JavaScript too - `undefined` there is not a default value, unless you think that an empty object is initialized with the memory representation of `undefined` for every possible key.

I'd go even farther and argue that the problem of initialization values is completely circumvented in languages with dynamic typing and - more importantly - late binding. If you don't care about the type of a variable until you access it at runtime, then you don't need to initialize it with anything. It's not ""uninitialized"" - it's ""nonexistent"".

**UPDATE**

My memory of JavaScript is outdated. I checked now, and it looks like JavaScript, too, raises an exception when you try to access an undefined value. Furthermore - unlike Python where ""defining"" a variable does not actually initiate it, in JavaScript using `let foo` (without assigning a value) assigns `undefined` to it - which means that it is an ""initiation value"".

So... JavaScript is in a different category than Python in this regard.",20,2025-04-08 13:48:38,somebodddy
programming,1jual0g,mm2bw7r,"Just don't tell the press. ""Google goes from 'Don't be Evil' to creating a programming language with Zero Values""",10,2025-04-08 17:08:05,FIREishott
programming,1jual0g,mm0ro7w,"I particularly see no big problem with zero values. I understand that zero might have a meaning in a data structure, and it being a default might lead you to do some debugging, but I usually find this type of behavior very trivial to debug. Random values like in C/C++ are much harder. Not my main complaint about go, I can pretty much live with it",14,2025-04-08 12:06:36,Zealousideal_Wolf624
programming,1jual0g,mm0hrab,"Go feels like the language creators thought they were really really smart, and everyone else was just stupid to not come up with their ""simple"" designs.

As it turns out, these simple designs only work the first 60% of the way.

Which caused those ""stupid"" people to reconsider and take a different approach, but the smart Go creators decided to double down.",9,2025-04-08 10:49:57,simon_o
programming,1jual0g,mm1kpw2,"Nil maps are weird, I don’t see any reason why they disallowed adding keys to nil map. 

Nil channels are weird, but kinda make sense if you consider their behavior together with select{} - you can temporarily disable receiving/sending to channel if you need.",1,2025-04-08 14:54:08,beebeeep
programming,1jual0g,mm6lmgw,"
When it comes to zero-values in Go, I find it's important to keep all gotchas with the type system in mind. For example, everyone knows that assignment to the nil map panics, but in cases with functions returning struct and error, it still occasionally confuses me:

```go
val, err := doSomething()
if err != nil {
    return MyStruct{}, fmt.Errorf(""failed to doSomething: %w"", err)
}
```

The returned zero might be ""valid"" for a compiler, but meaningless to the caller. 

I think idiomatically, you would just define constructors as functions (e.g. `NewFoo()`) instead of defining zero structs, and then enforce it with code review. However, this feels fragile at scale because of the reliance on the discipline, not the type system.

I do enjoy Go overall, but I feel it's often necessary to debug the code because of those type system shortcomings when writing out code quickly or heavily relying on unit testing.",1,2025-04-09 09:21:02,nexo-v1
programming,1jual0g,mm3uqyi,"Dumbest idea ever.

The idea is so dumb people have developed several sql null types just to fetch data from databases (which is possibly the most common task in programming).

Imagine designing a language that can't deal with fetching data from a database out of the box.",1,2025-04-08 21:32:41,myringotomy
programming,1jual0g,mm2huiq,"The zero of a slice, map or channel is nil, not an empty one.
They behave ""like"" reference types because they refer to an underlying datastructure. (a backing array in the case of slices for example). 

Zero makes a lot of sense if you don't want constructor galore. 
Especially when one has value types and not everything is a pointer by default.

Interesting article although there are a few mistakes.

It's also funny that it illustrate a case where people may want nillable value types (for serialization purposes, as a sentinel nil value) while criticizing nil. Nil is not the issue. It's programming with it that needs to be improved and still can.
In other languages, these are optionals or maybes.",1,2025-04-08 17:36:11,aatd86
programming,1jual0g,mm49uuy,"Learning Go as I go (no pun intended) while making a small microservice from scratch, zero values have been a bit of a pain to go around. Not hard, just unintuitive.

For example, I made a REST API server, using structs to express the expected request payloads, parsing request data and binding it into instances of said structs.

Doing this way, there's no way to know (unless you dig into the request body text, of course) if a requester sent a value that resembles a zero value, or if they didn't send a value at all. The popular go-playground/validator for example, if you have an int field marked as required but a requester sends ""0"", it assumes it's a zero value, and so that no value was sent, and fails the validation.

The ""solution"" has been to declare as a pointer of the type, so the uninitialized value is now nil instead of a zero value, but that feels inelegant.",1,2025-04-08 22:55:48,SchrodingerSemicolon
programming,1joxjzw,mkwykzu,"Love tools like this, the only problems I have with them is that I need them sporadically and then either forget they exist or I can't find them anymore. I've starred it on GitHub, perhaps I'll find myself trying it out soon!",3,2025-04-01 20:30:56,Veloxy
programming,1k5ap88,molu7ge,Am I the only one that hated working with airflow - felt super janky throughout.,1,2025-04-23 13:37:59,tittydestroyer69
programming,1k5ap88,mohq9p5,"“New UI” - looks at UI, yep, still an Apache project with UI designed by BSD admins.",-19,2025-04-22 20:22:59,jimbojsb
programming,1k528l8,mof3nxr,"I had to write code for processing Apple Pay payment tokens which involves a fair amount of crypto handling, and there are specific details for Apple Pay to make the whole thing work. I had no clue how to even start. I did everything with a mix of Copilot, Claude, ChatGPT, Grok, and a bit of stackoverflow. It was painful because the LLMs most of the time generated garbage code that didn't work, but after a few days it started working. Anyway my point is, when I was done I still had no clue how the whole thing works, and that troubles me deeply because if I'm ever asked to explain it or to replicate it, I'll be toast. I can't even put Apple Pay experience in my resume because if a recruiter asks any question about it I'll be unable to answer.",7,2025-04-22 12:21:50,bring_back_the_v10s
programming,1jubn3n,mm0quw8,Is this using grpc-web? e.g https://docs.rs/tonic-web/latest/tonic_web/,2,2025-04-08 12:00:54,tavi_
programming,1jtg8qc,mlumpo7,"Interesting post!

Last year, I wrote about a related topic — sharing my experience introducing Requests for Comments (RFCs) in my team. The post includes detailed statistics on the outcomes, along with thoughts on motivation, RFC structure, and more.

Might be of interest: https://tiendil.org/en/posts/two-years-writing-rfc-statistics",8,2025-04-07 12:07:37,Tiendil
programming,1jtg8qc,mlweu7k,Put them into your code repo.  Put keywords into the doc so that you can find them!,3,2025-04-07 17:58:13,onektwenty4
programming,1jtg8qc,mlwih1d,"Everything should be well-documented. Now if ruby would learn that it could perhaps avoid dropping like crazy on TIOBE ... (not that TIOBE is great either, but for trends it is semi-ok; ruby is even mentioned in the April 2025 release, together with other two languages destined to fade away. Not that I buy into TIOBE's narrative per se, but it can no longer be denied that something is not going well here. Don't you worry, some random accounts will soon come out and say that everything is ok ...)",1,2025-04-07 18:16:36,shevy-java
programming,1jtg8qc,mlvmvm5,"Ah yes, concise little documents.  I also like to play a little game I like to call Just the Tip.",1,2025-04-07 15:36:28,CherryLongjump1989
programming,1jtg8qc,mlxeako,"Better is to create a wiki to document all your technical decisions

Markdown wikis are great, they support text but also mermaid diagrams where you can create Flow, ER, Sequence, etc

I am doing this with a personal project and it helps me when I take a few days break so I can go back in track and get back into context.",1,2025-04-07 21:00:41,faustoc5
programming,1jmcktr,mkd5ppp,"idk i think this article is cooked. 

I'm not really sure you need all that much to support 10 million users creating, reading and liking each others posts.

I think a relational database on a big server, plus caching, plus a CDN, plus read replicas, basically would take you there. 

most users might read their feeds a few times a day, most would be making one post or less per day, may only be liking 3 or 4 things a day, may not even open the app more than 2 or 3 times a week.

eventual consistently is completely fine, we don't need cross region transactions, we aren't a bank.

you don't need webscale architecture for this kind of thing. some clever table partitioning would get you there. all this extra cruft early on is only going to get in the way of getting the ""core"" right.

it is true loadtimes would be greater overseas but i suspect most people would be surprised at how fast things stay so long as you have a global CDN for static file serving & its only the database which requires a transatlantic flight. its often 300ms to 500ms round trip, which is really not that bad early days. then geo-replicate read only replicas, which is pretty easy to set up even self hosted, and then its only writes which are taking 500ms, which most people are fine with waiting.

keeping systems maintainable by the smallest number of staff possible has never been more important than today, where hiring and budgets are frozen and we just have to make due with what we have.",27,2025-03-29 15:06:13,No_Technician7058
programming,1jmcktr,mkd27bo,"> *we need to constantly go to AWS and increase the CPU and Storage Limits*

> *The approach described above is using vertical scaling*

Do the authors know about software-defined datacenters? In a datacenter everything is virtual now, computing power, storage and networking. There is no ""single server"" anymore in a provider like AWS, the load is being assigned to physical resources in a transparent manner.

The entire article feels like ""just use cloud services"". The master template is highly debatable, I won't say you need by default things like search, event queues, a data warehouse, a Redis and a video microservices cluster.",6,2025-03-29 14:46:49,st4rdr0id
programming,1jmcktr,mkfhuh0,"You don’t really need much scale for a million users on a non-critical app.

I see often people making the mistake that they think a million or even tens of millions of records is a lot of data - it’s just not. This is rife in enterprise — everything is over engineered and yet somehow at the same time extremely poorly optimised :/",6,2025-03-29 22:48:24,maxinstuff
programming,1jmcktr,mkjnc1k,"You know, every time someone says users in situations like this, I have to ask: what is a user? What does the average user do? Are programs also users? On coworker responded with: well, what is love?",1,2025-03-30 17:06:07,GayMakeAndModel
programming,1jmcktr,mkf3mq8,"Shiitt a million users, give me drf-django, a beefy postgres server, caching, a few ec2's, kamal2, and a cdn.",0,2025-03-29 21:25:41,babige
programming,1jit6i6,mjhocng,"About [a month ago](https://www.reddit.com/r/programming/comments/1inu8ey/inko_a_programming_language_ive_been_working_on/)
I shared a post about Inko, a language that I've been working on for the last 10
years, and the feedback was very positive and helpful :)

This article talks about designing a simple key-value database in this language,
and the impact it had on it (e.g. in terms of features that needed to be added).
Even if you're not interested in the language itself, the general overview of
how the database is set up will hopefully prove interesting.

The source code to the database is linked in the article, but for the sake of
convenience I'll also [include it here](https://github.com/yorickpeterse/kvi).
It requires the `main` branch of Inko, so make sure to build from Git if you
want to play around with it.

Oh, and as for the title of this post being a little different: I figured most people
here have no idea what Inko is, so I decided to change it up a little such that
it (hopefully) appeals to a wider audience.",11,2025-03-24 15:19:46,yorickpeterse
programming,1jx5xms,mms8x8g,"Was at QCon London recently, and one of the discussions there was about making distributed architectural decisions, that is - individual teams being empowered to make architectural decisions, yet still maintaining congruent decisions overall. 

One of the approaches they talked about was in structuring ADRs (Architectural decision records). Backing them were a series of architectural principals, and these would themselves try to tie back to business strategies. So when a decision gets made, these principals could be consulted, and then referenced, in support of the decision being made - then referenced in the ADR itself.",3,2025-04-12 19:48:41,Ark_Tane
programming,1jx5xms,mmwt5pq,"This was a good read, thank you! I will definitely think about this a little more in my Projects!

I found one Typo (i didn't try to find any, this one was just obvious) towards the end of the Post, in this Sentence:

'We should top pretending that architecture is all about knowing good pattern and engineering, finding the “right optimal choice”.'

Likely supposed to be 'stop pretending' :D

Nonetheless, really good read, thanks again!",3,2025-04-13 15:42:28,cherrycode420
programming,1jx5xms,mmodwph,this is a good one.. it can be especially obvious to see missteps like this in hindsight,2,2025-04-12 03:22:56,bzbub2
programming,1jx5xms,mmo5mnj,how about we don't,-2,2025-04-12 02:26:07,CheeseNuke
programming,1jpgkhe,mkzsjht,"Go says it's a simple language but everything in go is weirdly and unnecessarily complex.

Instead of Handlerfunc being a type it should be an interface. Then you should be able to pass in any function with the same sig because it obeys the interface.

Also you should be able to define an interface on struct members and pass in any struct with those attributes.

But no, you have to go jump through hoops to accomplish something other languages are able to accomplish with ease.",17,2025-04-02 08:39:27,myringotomy
programming,1jpgkhe,ml5mx8l,This is how anonymous functions work in Java as well.,1,2025-04-03 05:47:22,blobjim
programming,1jnd4c8,mkipzij,"Why is Lehmer's algorithm important

* **Historical significance** : Lehmer’s continued fraction factorization algorithm was used to factor the seventh Fermat number in 1975.
* **Paper simplicity** : The original paper is only 7 pages long and super easy to follow.
* **Big O complexity** : Continued Fraction Factorization was the first algorithm to have sub-exponential factoring time.",6,2025-03-30 14:08:00,DataBaeBee
programming,1jnd4c8,ml454cf,"I thought before of an iterative factorization by starting from sqrt(N), but haven't gotten around to explore it. Didn't know it's already been investigated.",2,2025-04-02 23:46:14,WoodyTheWorker
programming,1jwxz2d,mmn99oq,"I had to learn AI in lisp back in the day

The only reason is because chains and whips didn’t excite you anymore",36,2025-04-11 23:02:33,olearyboy
programming,1jwxz2d,mmqbupj,Scheme was my favorite programming language in college. But the idea of getting paid for it at all is a long shot.,7,2025-04-12 13:38:56,Hen-stepper
programming,1jwxz2d,mmn74rk,So that no one can read your code?,32,2025-04-11 22:50:03,maxinstuff
programming,1jwxz2d,mmnvls3,"I used to program in Lisp because, like the article said, you can build primitives that are custom coded to the domain of your choice. And specifically, that Lisp makes this incredibly easy to do.

But at this point, languages like Java are catching up, and while they certainly aren't at feature parity, the extra level of effort to code in Lisp stopped being worth it.

That's actually why I stopped coding in Haskell too. Haskell pattern-matching is powerful, and you can do some crazy stuff with it. But now Java has Pattern-Matching (not fully implemented yet!), so I just don't have as much need to use Haskell.",5,2025-04-12 01:21:15,davidalayachew
programming,1jwxz2d,mmmn3j9,"Because you looooooove searching for dangling parentheses in your code, of course!",-8,2025-04-11 20:56:51,davecrist
programming,1jwxz2d,mmr5aa0,"nonsense, until one can compile C into lisp, I will be convinced",-1,2025-04-12 16:18:51,nextbite12302
programming,1jwxz2d,mmrz844,"I don’t want to rant too long about why Lisp is bad, so I’ll take just one thing: the dynamic programming. You know, the one that’s image-based, where you have a REPL which can compile new code, update class definitions on the fly (with objects being magically updated in-memory), edit your IDE and reprogram your dog without recompiles etc.

This development model, pushed by Lisp along with its sibling, Smalltalk, was a massive failure. Static approach, with its separation between compile-time and runtime, and lack of `eval`, won. Dynamic code execution is seen as an aberration. Why that happened is another question. But the main value proposition of Lisp (which is not s-exps, as some mistakenly think) ended up vastly rejected by developers. People like version control systems and statically reasoning about things. They like to deploy with containers not with application servers hot-reloading classes in memory. Rust is the total antithesis to Lisp and is so much more loved nowadays. And as for the rest of Lisp (OOP, GC, closures, JIT compilation, macros etc) is just available in pedestrian languages like Java or Scala, for example. So really, any way you look at it, Lisp and Smalltalk have become a part of CS history now. A venerable and highly curious exhibit in the museum of computer science: nothing more, nothing less.",-5,2025-04-12 18:54:28,Linguistic-mystic
programming,1jptjfe,ml2vmfz,I like the art in the reddit preview,3,2025-04-02 19:53:23,faze_fazebook
programming,1k4sund,mocujc4,Very excellent analysis and related detail.,3,2025-04-22 01:18:10,dead_pirate_bob
programming,1k3wymf,mo5mbbz,Would be interesting to have a comparison to shelf in your Readme,24,2025-04-20 21:33:37,Pheasn
programming,1k3wymf,mo6jpzg,You've listed every reason for using kotlin. Plus kotlin can run on the JVM giving you access to all java libs and web frameworks. Give me one good reason to use dart over kotlin,36,2025-04-21 00:53:41,piesou
programming,1k3wymf,mo5vbcg,Dart is like if C# was missing a chromosome.,75,2025-04-20 22:27:15,Asyncrosaurus
programming,1k3wymf,mo5sntb,"I have no real opinion on Dart, but “Unified language for full stack” is vastly overvalued as a concept IMO.

Any competent dev should be able to work productively in more than one language.

Sharing internal data structures across front and backend is asking for trouble as the system evolves; communication formats are better defined using API specs (OpenAPI, gRPC, etc.) to avoid leaking implementation details that only matter on one side and to allow the interface to evolve separately from the implementations. You can do code generation from those specs to avoid duplication of effort and minimize inconsistency.

There’s maybe a good argument to be made for sharing validation logic. But that’s usually such a small percentage of a code base that it shouldn’t be the thing that drives language choice.",71,2025-04-20 22:10:59,koreth
programming,1k3wymf,mo7x2rq,"I use dart to create CLI apps from simple  scripts to 100kloc deployment apps.

Best language I've ever used for cli and I've used a lot of them.

https://dcli.onepub.dev/

Fyi: I'm the author of dcli.",7,2025-04-21 07:06:59,Amazing-Mirror-3076
programming,1k3wymf,mo5ngdd,Is Dart the language of the month?,16,2025-04-20 21:40:14,BlueGoliath
programming,1k3wymf,mo5t19a,What's the current status of multi threading in Flutter and Dart?,4,2025-04-20 22:13:15,ComfortablyBalanced
programming,1k3wymf,moecvg9,"You are basically competing with NextJs and React Router/Remix while also indirectly suggesting that backends should be rewritten from Java/C#/C++/Go into Dart. I just don't see enough upsides with Dart for it to take a large part of the market.

My general thinking about programming languages and frameworks is that it is not enough to be a bit better than the market leaders, you'll have to be a lot better for people to switch.",2,2025-04-22 08:21:41,jbergens
programming,1k3wymf,mo61rv0,I got buzzword bingo!,3,2025-04-20 23:06:58,lolwutpear
programming,1jz1wmo,mn4ggk6,"On one hand I am indescribably impressed.  
On the other hand...  I am worried. Are you ok...?",6,2025-04-14 20:37:55,D20sAreMyKink
programming,1jz1wmo,mnbep0r,"Pretty cool, I like recursion and self-reference.

As an aside, I don't see the <aside /> element that often.",1,2025-04-15 22:59:19,NeuxSaed
programming,1jz1wmo,mn4p9k5,Very useful for programmers.,-2,2025-04-14 21:23:40,BlueGoliath
programming,1jvv0cs,mmi6u08,But why :(,2,2025-04-11 03:21:27,vancha113
programming,1jvv0cs,mmivnkm,"    (...==...)--(...==...)--(...==...)
    3

But Brainfuck (https://en.wikipedia.org/wiki/Brainfuck) already eixsts.

People have a lot of energy creating very odd programming languages or dialects.",1,2025-04-11 06:55:44,shevy-java
programming,1jqx0n9,mlb7qeu,"Paralellization is easy in C#! Just call Parallel.ForEach! Bam, done.

Only slightly /s because I literally optimized something exactly like this last week, though I also know tricks like Interlocked.Increment to avoid counter synchronization and such.",2,2025-04-04 02:39:01,xeio87
programming,1joch9z,mkqtqtd,Cool app.,2,2025-03-31 20:20:12,N/A
programming,1jo3ugf,mkoqynv,"This reads extremely dystopian; giving up on anything getting better ever:

> That does not exist, and there is no reasonable opportunity for it to ever exist because of prior practice and how generics work.  
> If you want ABI-stable mature libraries and enough of them to drive your entire PC experience you're going to be using C. 

But perhaps that's the winning bet in the world we live in.

The problem is that dynamic linking/loading has been held back by C for so long, that ""dealing with libraries"" has splintered into the 4 approaches mentioned in the article in the first place.

I believe that improving/modernizing dynamic linking/loading, is not a zero-sum game:  
It would also improve the lives of people following the other approaches.  
(Though I believe that 4 philosophies to ""dealing with libraries"" is 2 or 3 too many.)",6,2025-03-31 14:06:21,simon_o
programming,1jo3ugf,mkqbd2j,"I think the shared library approach was always going to fail, as it adds too many artificial constraints with too little upside now that memory & compute are this cheap. 

As for supply chains, I also recently hit that issue. As well as wanting general offline reproducibility. 


I think for these kinds of problems, 90% of the time the problem could be solved by having a tool that that helps imports a Cargo.lock's deps into a version controlled `./libs` folder.",5,2025-03-31 18:49:07,throwaway490215
programming,1jo3ugf,mkqkpdp,Wasm and its security model deserved a mention,1,2025-03-31 19:35:48,Exidex_
programming,1jmiybd,mkg095o,"Hello 👋 Security looks absolutely horrible on this one, no protection against replay attacks, no integrity protection, crypto unsafe PRNG, Bad seeding (time-based), No crypto binding to Action, low entropy solution, no rate/guess limit. And this does not even include sophisticated attacks like using ML/AI to Break the oldschool equation-in-image idea.


Given that you offer this as a hosted service that costs actual money, its hard for me to see good will here let me be honest. My recommendation is: discontinue the service as it is extremely hard to get captchas right. If continueing is inevitable: get some professional Security Help by experts.


Best regards,",50,2025-03-30 00:36:09,VajeynaPewp
programming,1jmiybd,mkf4s5w,"Your solution doesn't implement any accessibility for people who can't view images for one reason or another. Therefore, while your solution is gdbr compliant, it is not compliant with the new eeac or European accessibility act. Therefore anyone using their product in selling it to European customers, can be banned from the European market if they implement this captcha, banning people with disabilities from accessing their product. You're going to need to act add some sort of solution to this if you're planning to sell this to actual customers.",15,2025-03-29 21:32:20,blind_ninja_guy
programming,1jmiybd,mkfgwzj,"Every time I hit ""Try another CAPTCHA"" it gets faster.",3,2025-03-29 22:42:59,HexDumped
programming,1jm0eb0,mk90ehl,Anything will beat Clojure error reporting,12,2025-03-28 20:52:14,Alarming_Hand_9919
programming,1jpwf50,ml5mjfl,Changed from chained to Swiss table finally,1,2025-04-03 05:43:49,reini_urban
programming,1jpwf50,mlw79ru,"The key word here is _unrolled_.

A well-known optimization for linked-lists is the unrolled linked-list, which is a list of fixed-size arrays, instead of a list of elements.

Linked-lists are not necessarily very popular, though, so I'd argue the better known occurrence of this pattern is the unrolled binary tree, aka B-Tree.

And now, Valkey has an unrolled chained hash-table, and it's lovely.

_Note: this is not quite a Swiss Table / F14 design, as it's not fully an open-addressing hash table since not all values are in the main array._

---

Does anyone know whether they considered using buckets of _15_ rather than _7_ values?

Both Swiss-Table and F14 go with groups of ~16-ish elements, as this matches SSE capabilities for the residual check. And possibly because modern Intel CPUs prefetch two cache lines (128-bytes aligned) anyway.",1,2025-04-07 17:20:55,matthieum
programming,1joc5dd,mkqqtsz,"If these tools (looking at you, github, gitlab, bitbucket and similar products) would make it possible to properly review and comment on the commits (not just the PR), you've automatically enabled a stacked diff approach. Separate logical commits are infinitely easier to review than the PR's. And in the end git branches are just that: stacked diffs. 

But hey, that would require people to care about their commit hygiene.",57,2025-03-31 20:05:49,Illustrious-Wrap8568
programming,1joc5dd,mkrldgv,Gerrit solved this 15 years ago.,10,2025-03-31 22:47:25,Swimming-Cupcake7041
programming,1joc5dd,mkqnpgh,"Counterpoint, stacked PRs are a sign that your PR review process is broken enough to incentivize you to work on multiple things at once.",-8,2025-03-31 19:50:37,jbristow
programming,1jixt1j,mjnqdml,"I may have missed something in the article, but aren't ledgers supposed to be indelible, where no records can be modified or deleted?  How does one ensure that in a typical database system like PostgreSQL?",1,2025-03-25 14:25:45,frud
programming,1k2b0z2,mnuq38t,"It's like QWERTY keyboards, SMTP and Javascript in the browser. It is because it was, and you can be sure as shit it will keep being.",4,2025-04-19 00:45:54,pm_plz_im_lonely
programming,1k1d1vl,mnl0vin,"As an illustrator and software engineer, I find this delightful. Great work!",3,2025-04-17 13:43:12,myka-likes-it
programming,1k1d1vl,mnlh48c,"This looks very cool, just signed up for the newsletter.",2,2025-04-17 15:05:03,xIceFox
programming,1k0u6eb,mnk71hk,"Swapping bubble sort for selection sort can be a breaking change, as bubble sort is stable and selection sort is not.",4,2025-04-17 10:21:44,vytah
programming,1k0miag,mnl0hbt,"I'll check this out since it was a long time since I had a look at CMake, but the last time which was like half a decade ago I hated it. Really like how they did it with Premake, you leverage Lua which people already have a familiarity with. I actually wrote my own system which pretty easily ported the libs I needed to which was greatly inspired by Premake since I needed some feature which were absent, but it used Python instead. And that overall looked *very* promising imo because you can leverage the `with` construct in Python to declare your build in a nested manner. Python is already really well suited for iterating over structures & applying configuration meta data etc, and suddenly you leverage a language which people are already really familiar with. Here's an example for FreeImage for example:

    from kneader import *

    with workspace('freeimage', default_project='freeimagelib') as ws:
        with project('freeimagelib', output_type=StaticLib, project_type=Cpp,
                            include_directories={ Public:['Source'], Private:['Source'] }, file_patterns={ Private:['Source/<FreeImage|DeprecationManager|FreeImageToolkit|Metadata>/*'] },
                            file_group_filters={'inc': ['**.h'], 'src': ['**.cpp']}):
            add_defines([Public,Private], ['FREEIMAGE_LIB'])
            add_requires(Protected, ['*zlib#','../lib*','../openEXR'])
            add_file_excludes(Private,['**.c'])
        with project.create({'name': ['libJPEG','libPNG','libTIFF4', 'libOpenJPEG', 'openEXR','libJXR'] }, project_type=Cpp, output_type=StaticLib,
                            include_directories={ Public:['Source/{prj.name}/'], Private:['Source/{prj.name}/'] }, file_patterns={ Private:['Source/{prj.name}/**.<c|cpp|h>'] }, 
                            file_group_filters={'inc': ['**.h'], 'src': ['**.cpp']}, defines={Private:['_LIB','OPJ_STATIC']}):
            with config_filter(""prj.name in ['openEXR','libJPEG','libPNG','libTIFF4']""):
                add_requires(Protected, ['*zlib#'])
        with ws['libJXR']:
            add_include_directories([Private,Public],['Source/LibJXR/jxrgluelib','Source/LibJXR/image/sys'])
        with project( 'libRawLite', output_type=StaticLib, include_directories={Public:['Source/LibRawLite'], Private:['Source/LibRawLite']}, 
            file_patterns={Private:['Source/LibRawLite/**<libraw_|dcraw_|demosaic_>*.cpp']},project_type=Cpp):
            add_defines([Public,Private], ['LIBRAW_NODLL'])
            add_file_excludes(Private,['**compressed.cpp','**x3f**'])
        with ws['libJPEG']:
            add_file_excludes(Private,['**jmem<dos|mac|sys|ansi|name>.c'])
        with ws['openEXR']:
            add_include_directories([Public,Private], [ x.as_posix() for x in Path( 'Source/OpenEXR' ).glob('*') if x.is_dir() ] ) # Most sub folders in OpenEXR needs to be on the include path
            add_file_excludes( Private, ['*<ThreadSemaphore|ThreadMutex|ExplogTable|eLut|dwaLookups|toFloat>.cpp'] ) # Exclude some files containing main() & dummy implementations
            with config_filter( ""'Windows' in baked['architecture']""):
                add_file_excludes( Private, ['*Posix*'])
            with config_filter( ""'Windows' not in baked['architecture']""):
                add_file_excludes(Private, ['*win32*'])
        with ws['libOpenJPEG']:
            add_defines(Private,['USE_JPIP'])
        with ws['libTIFF4']:
            add_requires(Protected,['../libJPEG'])
            add_file_excludes(Private,['**<wince|vms|ojpeg|unix>**'])
        with ws.children_of_type(project):
            add_defines(Private,['_LIB', 'OPJ_STATIC'])

The entire thing is only a few hundred lines of code & in the early stages but iterating on it a bit more I really liked how productive it was, this was all a fairly long time ago though & I'm not actively developing in C++ at the moment. And yeah, the last thing needed is probably yet another build generator.",1,2025-04-17 13:41:04,Sairony
programming,1jz02cx,mn2k242,"I cannot quite follow since I haven't touched Zig in over a year and even then just summarily.

In the example code, does that mean that User data type can only be used in a linked list, since the type has an embedded pointer to the next item?",8,2025-04-14 14:56:38,flavius-as
programming,1jz02cx,mn2m3ad,"Not having sensible boundaries/encapsulation in the language and inventing their own worse solutions to age-old problems both seem to be a recurring theme of the language.

The article gives a good glimpse at both, and for that I recommend reading it.",21,2025-04-14 15:07:02,simon_o
programming,1jz02cx,mn3lim9,"Very weird to have the exception, something that are often not what you want, intrusive implementation as the normal option in the std lib 

To not say anything how this encourages developers to try to get the data using some offset from node, basically asking for memory bugs",7,2025-04-14 18:02:16,teerre
programming,1jz02cx,mn4uq52,"This change is based and if you think Container Linked Lists are better than Intrusive Linked Lists you are wrong.

Container Linked Lists have exactly one purpose: To nudge you into using a Vector for your out-of-the-box ""List"" data structure. They do have one positive over other builtin list types - they concatenate in `O(1)`... At the cost of `O(n)` pointer walks for indexing. Maybe the only truly useful application of a Container Linked List is `std::LinkedList<std::ArrayVec<T, COUNT>>` or similar for building a `Vec<T>` that never invalidates its pointers (but is *mostly* contiguous in memory).

Standard Libraries having these Container Linked Lists only serve to deter people from learning about what you can *actually* do with linked lists. They're worse than useless - they're actively dissuading developers from considering and trying linked list based solutions by associating ""linked lists"" with ""expensive lookup"" and ""just use a vec"" *from the day they start programming*.

Intrusive Linked Lists are just **better** in cases where you need to link data *structures* together, not *data*. Also, you can make a Container Linked List using an Intrusive Linked List - you can't do the opposite. They have all (mostly) the same performance characteristics as Container Linked Lists, they just have poor ergonomics due to their tailoredness to specific problems. Additionally, Container Linked Lists take away one of the most powerful aspects of a linked list: control over where the data lives in memory, and its lifetime. Container Linked List data lives in and for as long as the Container (which is also a useful property, to be fair - but it's still a subset of the capabilities of an Intrusive Linked List).

The world runs on Intrusive Linked Lists. Basically every OS on Earth (and in space) uses an Intrusive Linked List for task and resource management.

Container Linked Lists should be considered harmful.",7,2025-04-14 21:53:26,ToaruBaka
programming,1jz02cx,mn789i4,"> The new version isn't generic. Rather, you embed the linked list node with your data. This is known as an intrusive linked list and tends to perform better and require fewer allocations. 

I don't get it. How new solution requires fewer allocations  than pretty intrusive 

     pub const Node = struct {
       next: ?*Node = null,
       data: T,
     };",2,2025-04-15 08:08:42,Maykey
programming,1jysggs,mn0xllx,Cool article but not everything has to be a modular monolith or microservices. Choosing the right architecture depends way more on the project's specific needs than following trends. Sometimes an app is best served by a single monolith without any fancy modules.,55,2025-04-14 07:22:21,ThatHappenedOneTime
programming,1jysggs,mn2t80z,The funny thing about bog standard monoliths is that that's what most successful companies started with.,11,2025-04-14 15:43:09,Isogash
programming,1jysggs,mn18hh7,"tl;dr: Nothing is simple, no lunch is free.

For an article that starts with mocking the technology pendulum, it seems awfully focused on modular monolith failure points. 

Article implicitly assumes that there's one architect, and then the team is working actively against it. No shame, that pattern is so awfully common that we at least have to take it into consideration.

But if we can't get the team behind the architecture, maybe that's not the team's fault?",8,2025-04-14 09:20:29,elperroborrachotoo
programming,1jysggs,mn42u8m,"Someone should tell him you can carve out a module out of a monolith without having to go through the pain of following all the modular monolith (in-process microservice?) constraints he advocates. 


I'd be a boring architect, no doubt.",4,2025-04-14 19:29:42,ilawon
programming,1jvb14n,mm9dl80,"""The long slow failure of Lenat’s project is a strong indictment against the symbolic-logical approach to AI.""

Really? Isn't that like saying ""the long slow failure of donald trump's human soul is a strong indictment against the representative democracy approach to government."" The one doesn't follow from the other. Representative govt may turn out to be unworkable garbage, but we cannot learn anything about the form of that failure from observing the decomposition of donald trump's soul.",2,2025-04-09 18:58:46,mhcat
programming,1jkk6bj,mk3kagr,What’s it do? You’ve documented the install but not features other than a project / workspace. So no idea what it’s got and why I’d use it,2,2025-03-27 23:52:19,olearyboy
programming,1k4iwx4,moaq07d,Poor python. I would not want to tie a haskell knot in it ...,-1,2025-04-21 18:30:34,shevy-java
programming,1jz5omf,mn3tgz1,Short and fun exercise for folks who directly learnt React,5,2025-04-14 18:41:57,Eastern_Selection_64
programming,1jz5omf,mn4bqkc,"I did something like this just last week, why did you declare the state variable outside the useState function?",0,2025-04-14 20:14:03,saantonandre
programming,1jz5omf,mn3ov5m,"Just what ECMAscript ___doesn't___ need, more damned frameworks!!!!",-21,2025-04-14 18:18:49,church-rosser
programming,1jz03ir,mn48qpw,THEN must be #defined as nothing somewhere.,1,2025-04-14 19:59:19,XNormal
programming,1jz03ir,mn5zm8c,"It is pitch black. You are likely to be eaten by a grue.


Now do Planetfall!",1,2025-04-15 01:53:37,LegitBullfrog
programming,1jy791c,mmy15gf,"> Supports the proleptic Gregorian calendar between 1 and 9999 AD

Aw here we go again, Y10K bugs …",6,2025-04-13 19:31:23,rsatrioadi
programming,1jw8g1n,mmgdngb,Java could never.,16,2025-04-10 20:55:10,BlueGoliath
programming,1jw8g1n,mmgodh8,"finally the null conditional assignment, hooray!",8,2025-04-10 21:50:42,yanitrix
programming,1jw8g1n,mmi3iji,"These are undeniably useful features.  But I am not a fan of multiple unrelated syntax forms to do the same thing.  It just invites bikeshedding and time wasted on code consistency issues.

I don't suppose there's any chance that C# will ever deprecate some of its older syntax, like delegate{} or the now-old form of extension methods?",8,2025-04-11 02:58:10,--recursive
programming,1jw8g1n,mmk4tn6,Where are my unions in C#?,0,2025-04-11 13:23:20,TheWix
programming,1jw8g1n,mmjax9s,"Thank god they are adding more features, that was something C# really lacked!",-7,2025-04-11 09:38:19,simon_o
programming,1jw1j0l,mmmz6tx,"Creating a whole operating system *and* having documentation for ""how would a beginner code on this platform"" is genuinely super badass.",3,2025-04-11 22:03:13,Booty_Bumping
programming,1jttu8g,mlx3kop,"This is clever, I like the approach.",0,2025-04-07 20:05:30,guitarromantic
programming,1jrluex,mlgmd6i,These are pitfalls of programming which Rust does not prevent.,11,2025-04-04 23:46:53,Mysterious-Rent7233
programming,1jrluex,mljor9c,"Thanks, I learned several things to make my rust code safer.",3,2025-04-05 14:42:23,thomas_m_k
programming,1jrluex,mln0cbm,One important one that it is missing is stack overflow via recursive drop.,1,2025-04-06 02:28:46,slaymaker1907
programming,1jm79kv,mkrjzn7,"I skimmed it. Looks like a great book for beginners. The only thing I found lacking was the very short description on function pointers, and the total absence of describing pointer-to-array types. I.e int (*)[40]",1,2025-03-31 22:39:32,Madsy9
programming,1jip6yo,mjih71w,"Really great explanation, I look forward to reading the other parts of the series. IMHO you should provide a concrete example other than /16 to make it clear exactly which bits are fixed. A /8 or /24 example would make it very clear what is considered the ""front"" bits.",1,2025-03-24 17:39:54,lambda_bravo
programming,1k511df,mof2l15,"Self host zrok, this is the way.",4,2025-04-22 12:14:35,GuurB
programming,1k511df,moi8u7p,"I would generally never open up anything on local computers. Use git and build a pipeline to start up instances of selected branches. That way you can expose the services safely without compromizing your local computers.

If you can run it locally then you can also run it on infrastructure. If its a dockerized service then its even easier to deploy anywhere on demand.

Edit: Not to take away from your project here, its a cool project. I myself made a go service to effectively do the same as ngrok as a hobby project. But generally I'm strongly against opening up your local computer to anything as it has a lot of compromizing usages/files/passwords that dedicated hosted services do not have.

I do still have some (very sad) exceptions when for example developing a slack plugin or that kind of thing where there is no way to test it locally without opening up to public internet.",3,2025-04-22 21:57:15,Jolly-Warthog-1427
programming,1k511df,mof8wxg,"I set up a reverse proxy in Apache httpd running on a virtual host I have in the cloud on a fixed IP address. SSL certificates provided by certbot using letsencrypt. The proxy points to a localhost port. 

Then I ssh with reverse port forward from my laptop to the server to have the proxy reach my laptop via the defined ports.

Best part is I did not have to install anything new. I just used the things that were already there.",2,2025-04-22 12:55:17,vivekkhera
programming,1k4mww3,mobdjfs,[deleted],-10,2025-04-21 20:27:03,N/A
programming,1k4j44o,mobqfya,"Lots of information to be had here. For some reason I never managed to use kate much at all; it seemed somewhat clunky and awkward. 

I still think it would be nice to have ""The One Universal Editor"" like where the user can cherrypick which functions to be had and how. (Emacs and Vim are IMO lacking in regards to ""true GUIs"" such as sublime. I really mean a universal editor, not one that is limited to what we currently have and sacrifice for other features rather than all the useful features. There are even editors that re-implement parsing for files such as .py files or .pl files - that should never have to be implemented by different projects in regards to syntax highlighting, but the reality of the situation is that almost everyone seems to just duplicate existing functionality.)",1,2025-04-21 21:31:42,shevy-java
programming,1k3zmdw,mo8gi5e,"I love this, the actor model is a much better solution to cloud native mentality",3,2025-04-21 10:29:40,IsThisNameTeken
programming,1k0k6q2,mnes27p,Awesome! Love the reference to Duff's device in the chapter on lightweight tasks.,4,2025-04-16 14:00:13,No-Concern-8832
programming,1jwpkgo,mmkhy1f,"In the early 90s, I worked at a company that had an in-house written print spooler for their big green-bar printer, and all the other printers located in the office. The spooler was mostly written in PL/1, but it had printer-specific code written in Postscript. I had to do a bunch of maintenance on that thing over the years I was there. Postscript was interesting; PL/1, not as much. (Actually, it was PL/P, which was a customized version of PL/1 that ran on Prime minicomputers.)",2,2025-04-11 14:31:55,joeyGibson
programming,1jmf3pe,mknyh00,Short answer: Irrelevance.,1,2025-03-31 10:53:32,simon_o
programming,1jmf3pe,mkfbz3j,"even this very post on scala has very little in the way or engagement or interest. it is truly a difficult period for scala. however i still believe it will eventually dethrone kotlin, java, and groovy as the JVM language of choice.",-5,2025-03-29 22:13:38,No_Technician7058
programming,1jlu8rl,mk6c29d,"""The biggest lesson that can be read from 70 years of AI research is that general methods that leverage computation are ultimately the most effective, and by a large margin."" - Richard S. Sutton (2019)

From people closer to research I'd be curious to know whether this rings true for recent years.",7,2025-03-28 12:47:40,dwmkerr
programming,1jlu8rl,mk6rvk9,"on the same page.

> The number of transistors in an integrated circuit doubles approximately every two years.
>
> Often used to illustrate the sheer speed at which semiconductor and chip technology has improved, Moore's prediction has proven to be highly accurate over from the 1970s to the late 2000s. In more recent years, the trend has changed slightly, partly due to physical limitations on the degree to which components can be miniaturised. However, advancements in parallelisation, and potentially revolutionary changes in semiconductor technology and quantum computing may mean that Moore's Law could continue to hold true for decades to come.

It's really funny how people today read Moore's Law. It's often read as if it was inevitable these days, but it served a very different purpose when he said it originally.

It was a promise to investors; ""We will uphold the Moore's Law! We will ensure <The number of transistors in an integrated circuit doubles approximately every two years.>""

And a threat to Intel employees; ""Make sure that <The number of transistors in an integrated circuit doubles approximately every two years.> The punishment for failing to uphold this law is you're fired.""

It was a clear and concise way of communicating his companies mission to everyone who worked there, and to the people who invested, what they were investing in.",7,2025-03-28 14:16:52,CVisionIsMyJam
programming,1jlu8rl,mk7w4sj,"This may apply to more than just AI; here's a talk arguing that the increasing success of fuzzing comes from the fact that it can find bugs using compute power instead of human effort.

https://www.youtube.com/watch?v=Jd1hItbf52k",4,2025-03-28 17:33:27,currentscurrents
programming,1jlu8rl,mkssbaz,"I like the list overall, a really nice summary.",1,2025-04-01 03:10:45,me_again
programming,1jk4rzs,mjss830,"Wow, this looks great!

Is this made just by you?",1,2025-03-26 07:55:07,weetbix2
programming,1jk4rzs,mjst67k,It looks great. It’s a lot of features. Really like the ability to generate files into other systems nomenclature. E.g. Generate build/run files for VScode. I hope the bug squashing doesn’t  become overwhelming.,1,2025-03-26 08:05:35,this_knee
programming,1jk4rzs,mjtkh8k,"You should update the header to include ""vcpkg and conan"" integration, because skimming the text could make someone think it's really only for vcpkg.",1,2025-03-26 12:18:03,suitable_character
programming,1jk4rzs,mjuaypa,Does it work with system packages / pkg-config?,1,2025-03-26 14:48:37,maep
programming,1jk4rzs,mjw54c7,What advantages does this have over something like Meson?,1,2025-03-26 20:09:30,PuzzleheadedWeb9876
programming,1jk4rzs,mk3nosa,What makes this better than [xmake](https://xmake.io),1,2025-03-28 00:10:49,erhmm-what-the-sigma
programming,1jzxylv,mna3u55,Wow such a hard hitting generics level feature.,-15,2025-04-15 18:55:58,BlueGoliath
programming,1jy4q1b,mmx2cz4,"I am impressed, this kind of image processing seems like a huge pain in the behind to me, but your explanation and github code will hopefully give me ideas to follow if I ever need to do such horrible things",4,2025-04-13 16:30:21,HeadAche2012
programming,1jy4q1b,mmvitpd,"Link to the code, if anyone is interested: [https://github.com/mhso/SuperHexagonAI](https://github.com/mhso/SuperHexagonAI)",2,2025-04-13 10:33:30,Catz1010
programming,1jy4q1b,mmzg1vi,"would this work with a flash game? I've been looking into a way to create a reinforcement learning/AI for an old 2D mountain car type game called Max Dirt Bike, from what I've read a lot of the gymnasium documentation for flash hasn't been kept up to date and people were having compatibility issues, so I never really went down that path but always figured I could brute force train an AI to just open a window and read the environment, only 4 control options (left, right, up, down) but then the cursor is only used to reset

I can elaborate/provide examples of what it looks like exactly if you think it sounds doable

edit: great video btw",2,2025-04-14 00:22:29,nickpiscool
programming,1jwla31,mmj880w,"Good for you, but most people should probably just run ddclient.

https://github.com/ddclient/ddclient",7,2025-04-11 09:09:35,fragglerock
programming,1jwla31,mmlcnry,This is good. Cloudflare also provides a solution for this called Cloudflared,3,2025-04-11 17:03:07,prateeksaraswat
programming,1juijcx,mm40xex,Regular Expressions are often not the right solution for many use cases... Same can be said of Monads 😁,4,2025-04-08 22:05:22,church-rosser
programming,1juijcx,mm7v6c8,Aren't regexes instructions for generic parsers?,2,2025-04-09 14:35:14,AnnoyedVelociraptor
programming,1juijcx,mm833vk,">We generally don’t use regexes in Haskell. We use parser combinators instead, because they are almost always better. In other languages, it would be considered overkill to write a full parser when a simple regex can do the same thing.

*20 lines later instead of a 1-line regex*

Cool Story, Bro.",0,2025-04-09 15:14:19,gladfelter
programming,1jucpqv,mm0ypm0,"Damn, that's one of the many languages ​​I've forgotten completely. Well. It was a good party.",1,2025-04-08 12:53:00,YahenP
programming,1jucpqv,mmci0tq,"Fortran led to Algol which lead to C then C++ and its relatives such as Java, JavaScript, and C#.",1,2025-04-10 06:22:57,Zardotab
programming,1jr7jyo,mlhp1st,"ACID vs BASIC

CAP theorem

Consistency vs Availability

Pick one, you cannot have both

Similar to Heisenberg's Uncertainty Principle",4,2025-04-05 04:12:13,atehrani
programming,1jr7jyo,mlcgio7,The smudged lady-bugs are the Gen-AI rendition of one of the main ideas of the article: that of processing bugs in a serialized manner (i.e. one by one).,-8,2025-04-04 09:11:49,klaasvanschelven
programming,1jr7eiu,mltybhg,[deleted],3,2025-04-07 08:13:38,N/A
programming,1jpx2b6,ml3iixx,"This has always bothered me. If you are writing in a memory-safe Language like Rust, why would you ever use a C library that is not safe? I have seen this when somebody wants to connect to a piece of hardware using an odd memory footprint using the library provided by the manufacturer. If the hardware requires you to use unsafe practices, why are you using that hardware? If the answer is 'Legacy' and/or 'Costs', you had better be prepared for the technical and security debt you are incurring.",-12,2025-04-02 21:43:09,Bonejob
programming,1k5okeu,mojn4ve,"I could make a joke about the efficiency of UDP, but I don't know if you'd get it.",505,2025-04-23 02:46:35,AnnoyedVelociraptor
programming,1k5okeu,mok5k39,"In the beginning of the film “28 Days Later” (2002) Jim wanders the city of London shouting “Hello”. He receives no replies, so we don’t know if anyone heard him.  Without a reply he keeps shouting, “Hello.”

Consider now, “Toast of London” (2013) where Steven Gonville Toast is recording lines. The work experience kid Clem Fandango says, “Hello Steven this is Clem Fandango can you hear me,” and Steven replies, “Who the fuck are you?”  In this scenario we know explicitly that Clem Fandango can send a message and that Steven is able to receive it and reply.  However, we don’t know yet whether that message has been successfully received by the original sender and so we need a third message, finally, from Clem Fandango to Steven so that all parties know that they can both send and receive to each other.  This is why we need a three way handshake.",117,2025-04-23 04:56:49,kurtrussellfanclub
programming,1k5okeu,mok5ojl,"3-way handshake, not 3 handshakes...  3 steps, one handshake. ",183,2025-04-23 04:57:51,Mundane-Vegetable-31
programming,1k5okeu,mojv0zj,Dropping your .edu email address in a random blogs comment section is savage 🫡,49,2025-04-23 03:38:04,sssanguine
programming,1k5okeu,mojrad0,What someone really needs to do is write a bunch of awesome books on TCP/IP that people can reference so this kind of writing is unnecessary.,70,2025-04-23 03:12:42,jet_heller
programming,1k5okeu,mojm4bw,It needs to make a firm grip.,28,2025-04-23 02:40:21,BlueGoliath
programming,1k5okeu,mok10o3,Why do I feel I already saw this? Oh because I did. Guy reposting the same article after 6 months https://www.reddit.com/r/programming/comments/1frsz7s/why_tcp_needs_3_handshakes,29,2025-04-23 04:21:21,Dunge
programming,1k5okeu,mokj2ud,"One thing the article doesn't mention is the benefits of the 3-way handshake for the security of the Internet as a whole. In protocols that don't have a handshake, source IP spoofing allows an attacker to use legitimate servers (which are thus hard to just block) to perform DoS attacks on 3rd party victims, by amplifying the traffic with a small request generating a large response. This was a common problem with DNS servers in particular, as DNS responses can be much larger than the request.

The attack pattern is simple: the attacker crafts small request packeta with the source IP of the victim and sends them to the server. The server receives and processes them and sends large response to the source IP, so to the victim device. This floods the victim with much more traffic than the attacker could have otherwise generated. In TCP this attack doesn't work, as the SYN-ACK response is very small, and any higher level request would only happen after the attacker has successfully received this SYN-ACK packet, so it can't just establish this connection using the source IP of the victim.

This is important to note, because it constraints the design of TCP and any other similar protocol. If this attack didn't exist, we could have optimized TCP by optimistically sending data in the SYN and SYN-ACK packets and skipping the rest of the handshake if the data is successfully received (using a pre-agreed initial SEQ number, such as 0). That would have some extra cost for bad connections, but would have much lower latency for the more common case of no packet loss. But, it would make TCP susceptible to this attack, and so it can't be deployed on the internet without other precautions (such as SYN cookies, i.e. relying on an older successful connections as proof that the src IP is not spoofed).",11,2025-04-23 07:03:59,tsimionescu
programming,1k5okeu,mol2xco,3 handshakes? In this economy?,3,2025-04-23 10:31:29,MrChocodemon
programming,1k5okeu,mol6dm3,https://i.imgur.com/FPupCJb.png,2,2025-04-23 11:01:01,PGLubricants
programming,1k5c1q5,moh98fe,Maybe fix Reddit instead of posting here.,-10,2025-04-22 18:58:54,BlueGoliath
programming,1k1d2z3,mnrvlkm,"Very nice article! Another interesting piece of reverse mode AD is static vs dynamic graphs.  For programs with a fixed size and control flow you can use a transpiler (ala Stan/jax etc.) to fuse the passes of the reverse mode together. This gives you reverse mode but with optimizations opportunities like you did symbolic differentiation. Though static graphs are much more restricted. 

Since you need a fixed path at runtime static graphs based AD cannot have conditional statements that depends on parameters. So while() loops become impossible. Things like subset assignment on matrices can also become weirdly tricky. Most AD libraries like Jax and pytorch give strong warnings about subset assignment to matrices. 

Dynamic graphs in reverse mode AD allow the depth of the graph to not be known at runtime so things like while loops become possible again. There's interesting research currently into combining dynamic and static graphs by compressing parts of the dynamic graph that you can identify as fixed.",1,2025-04-18 15:32:07,Stevo15025
programming,1jz2jbq,mn35g12,This is both impressive and deeply frightening,2,2025-04-14 16:44:27,oceantume_
programming,1jz2jbq,mn3kmg4,"That is absolutely insane. Idk if I’d use it, but as a concept it is wild af. 

How is the performance? I’d assume it takes a while to process a large proto file.",1,2025-04-14 17:57:57,CloudSliceCake
programming,1jz09sj,mn2hxtj,"I don't have the time, but this makes me want to drop Newlib even more.",1,2025-04-14 14:45:49,jaskij
programming,1jugrip,mm296eg,"I have found that ""hostile codebases"" (the opposite of ""friendly code"") tends to have a few qualities:

1. **Lack of consistency**.  Consistency is key for discovery and understanding the patterns in the system.
2. **Broad complexity**.  It's OK to have a bit of highly dense complexity if it can prevent complexity from spreading broadly in the codebase.  But that highly dense complexity needs to be well structured, well documented, and well tested.
3. **High repetition**.  Repetition creates opportunities for simple mistakes and creates cognitive load ""If I do this here, I also have to do this there and there and there..."".  This is very common in startups where a lot of copy+paste happens in place of refactoring to patterns, but is also more prone on some platforms versus others.
4. **Highly transactional**.  The code tends to lack domain entities and instead, represents the possible transactions instead.  The net result is that it's hard to discover, reuse, and re-compose existing code because of the tight binding to the transaction.",4,2025-04-08 16:55:00,c-digs
programming,1jphw3e,mkzq9xu,"Huh, I never thought about having to memoize children, too. Makes sense when you think about it, of course, since they are just another prop... Makes for really inelegant code, though.",4,2025-04-02 08:12:32,Pesthuf
programming,1jllpme,mk5jjfg,This was a really well written article actually.,7,2025-03-28 08:43:16,SwitchOnTheNiteLite
programming,1jllpme,mk5rpxr,"I'm sceptical of these releases from anthropic. Since they don't specify their methodology for inspecting and labelling model features in a way that's verifiable, this is just a bunch of flow chats saying ""look how clever our AI is! It thinks! Not like other models that just regurgitate!""",7,2025-03-28 10:10:01,Omnipresent_Walrus
programming,1jllpme,mk6zkny,"These blogs always sound like an ad, but this one is trying really hard. We've know for a long time how latent spaces work, that has nothing to do with thinking, it's simply a statistical relationship. The rhyme example is particularly silly since they are forcing a lot of meaning for no reason while also editing the network as they see fit. The model isn't ""planning ahead"", it's simply reacting to the fact that not every word rhymes with ""it"" in the training set, that's literally what these models always have done, statistically tell you what's the next word",0,2025-03-28 14:55:48,teerre
programming,1jkdgeo,mjud4pz,Interesting that Pokémon Company has been more lenient compared to the rest of Nintendo.,10,2025-03-26 14:59:20,Subsum44
programming,1jkdgeo,mjw3h1v,"> But, Pokémon Showdown is the OG battle simulator. They’ve been doing what Pokémon Champions is set to do for over a decade.

R.I.P. Shoddy & Net Battle, if you know you.",2,2025-03-26 20:01:35,valarauca14
programming,1k2ilmi,mnuy3g3,"> The first feature, run to cursor, resumes the program until it reaches the line where the cursor is at. It is a declarative alternative to the primitive debugger features for stepping into, over, and out — rather telling the debugger how to do every single step, you just directly tell it where do you want to be:

You just described a breakpoint",68,2025-04-19 01:36:27,rlbond86
programming,1k2ilmi,mnvfb5g,"> Quick Evaluate Expression

I do this in gdb all the time. `p myVar * otherVar`",8,2025-04-19 03:32:47,remy_porter
programming,1k1c4wq,mnpiak5,"> Since 64-bit computing was hideously expensive at the time of when the CRC33 polynomial got truncated down to 32-bits without any loss in generality even though this gives different results then a pure 33-bit implementation

I could be wrong here, but my understanding was that the polynomial is always one bit larger than the field, with the top bit always being a 1.  
Due to the awkwardness of 33-bit calculations, it's just easier to truncate it to 32 bits and make the code work with the implicit '1' bit at the top (i.e. manually do the necessary XOR).  Thus polynomials get specified without the top '1' bit.",2,2025-04-18 04:25:19,YumiYumiYumi
programming,1k0j9jk,mnf4il0,"Great to see another possibility to simulate logic circuits in the 2020s! I did a little survey of the existing programs last year because I wanted to translate the original schematics of a PDP-8/I in order to check my FPGA implementation for deviations. Turned out that most tools either require Java on the Desktop - or are browser-only and don't support many of the Logisim features such as nested circuits or signal tunnels.

I ended up finding this kinda new tool: [https://www.antarescircuit.io/](https://www.antarescircuit.io/)

It's a desktop program implemented in Kotlin, but there's also a web version that can load the circuits produced by the desktop app. This allows playing around with circuits on the web, e.g. here: [https://www.antarescircuit.io/docs/web/web/](https://www.antarescircuit.io/docs/web/web/)

I contributed a few patches and ideas to Antares and I think it's a great state-of-the art circuit simulation tool now. Here's the original PDP-8/I circuit from the 1960s if anyone's interested, Antares even allowed using the front panel art as an SVG: [https://github.com/fpw/antares-pdp-8i](https://github.com/fpw/antares-pdp-8i)",2,2025-04-16 15:03:11,fpw23
programming,1jzw379,mnaquca,"> says Daniel Terhorst-North, the author of the viral Twitter thread on the best programmer he knows


No idea who DT-H is and really don't care, but this is the most damning of faint praise possible.


> The programmer’s job is to deliver.  If you don’t get the job done, it doesn’t matter how good you are!


Is their job to deliver empty aphorisms...?",52,2025-04-15 20:50:40,jonhanson
programming,1jzw379,mnc2975,"I think the best programmers have certain personality traits, and a culture of humility, personal responsibility, and self improvement.

Being humble, means they are open to looking at things from different perspectives and questioning themselves - that itself leads to learning, improvement and identification of errors.

Personal responsibility means they take charge of things and dont expect others to fix things. If they see a possibility of a negative outcome, they act on it, and by doing do, they also gain certain experiences and knowledge which again make them better.

Self improvement means that they dont settle for getting things done, but for doing things better. That also leads to further self improvement.

Two people can be equally intelligent and capable at problem solving, but the persons personality traits can lead to more learning experiences, or them creating value for the team.",12,2025-04-16 01:15:50,StarkAndRobotic
programming,1jzw379,mnal5ie,I don't want to become best. I want proper life work balance. ,44,2025-04-15 20:22:28,Eastern_Interest_908
programming,1jzw379,mna12rf,Never trust anyone who wears a hat indoors ;),21,2025-04-15 18:42:10,OllieOnHisBike
programming,1jzw379,mncv00e,“I don’t always describe great programmers but when I do I describe myself.” I just can’t get this notion out of my head when reading these same articles over and over again. There is no data here. It’s all just subjective value judgments. Who cares?,8,2025-04-16 04:24:19,shizzy0
programming,1jzw379,mn9fxtv,"Dude nailed it - it's not just about slinging code, it's about understanding people, asking better questions, and being curious as hell.",14,2025-04-15 16:58:25,isaiahassad
programming,1jzw379,mndzt8r,">The best programmer he talked about is a real person; he’s known that person for over 20 years. And that person is not the best programmer because they are the best at solving LeetCode or the best at solving algorithmic problems (those programmers are going to be the first ones replaced by the LLMs, says Dan).

Yeah but no, there's no way LLMs are going to be able to be front runners on solving algorithmic problems. One of the best programmer I know is at the very forefront in the domain where he works, there's never going to be a LLM that's going to generate better solutions than him because they can't push the envelope forward, it just trains on existing solutions. The very best are also usually working more on architectural problems & overall design issues, also an area where LLMs are notoriously bad. The larger the project, the more it pays off in the long run to think about architecture & design. If you get it wrong everything you build on top of it will not quite fit, and then you need to special case & break the rules you've decided on, and down that path lies huge buggy spagetti mess.

>The best programmer doesn’t start by doing extensive research on the problem at hand, reading tutorials, etc. He just starts, even if he doesn’t know everything about the task. He does one thing, and if it doesn’t work, he then tries something else.

>He resists the urge to procrastinate and knows that doing (and doing something wrong) is researching!

You start by researching the problem domain you're trying to solve, and then you try to balance analysis paralysis with actually coding. The worst programmers just start to code by picking the first solution they can think of & get to work without spending time exploring the solution space of what they're trying to solve. The larger your toolbox is the more ways you have to approach a problem, and that generally also means you spend more time thinking about the problem than actually coding. The best coders find the balance here iterating on solutions they know will ultimately be scrapped, but also spending a lot of time understanding how others have solved similar problems. Actually writing code is a very small part of the time spent, because the more experience you have the more it's just an exercise of filling in a known puzzle which you've already decided on in your head. You already have a good idea about what aspects of that puzzle are problematic, because you know from experience what the full picture looks like.",2,2025-04-16 11:00:06,Sairony
programming,1jzw379,mndy39w,"People believe that ""best/great programmer"" can live on some imaginary intersection with ""best employee"".


Because of this conflation, the discourse gets really muddled. 


You can either be a great employee (political, obedient, quiet), or you can be a great programmer (technically skilled, critical, outspoken).


While I've seen some people try to get close, I've never seen both aspects in a single individual. The most political developers have always been the most prone to bad technical decision-making. The most technically skilled have always been indifferent towards optics and manipulation. 


In business nowadays, that puts their technical skill at a disadvantage as those people will most often be flagged as insubordinate. When in reality, they are simply more focused on the task at hand. 


Make of all that what you will, but I've been at this for 30 years. Companies are just schoolyards full of adults and there are still bullies.",2,2025-04-16 10:45:50,RDOmega
programming,1jzw379,mncqq5b,Random guy who has built nothing of value: “listen to me how to be a good dev with an AI created dot point list which is the same fodder everyone keeps repeating”,-3,2025-04-16 03:52:17,SadCoder24
programming,1jzw379,mnhdao2,"> 3.2 Send the team home
>
> No one should be working late; a rested team is effective team.

Are we talking about a programmer or about a manager?",1,2025-04-16 21:44:10,somebodddy
programming,1jnxz1w,mm5zgtw,"A modest proposal;   a flag like --treat-ub-as-error  for your c/c++ compiler.

However, that's not going to happen. The C and C++ language committees are populated entirely by compiler wonks.

Speed and efficiency... of cpu cycles. Are they the right cpu cycles? Eh. Not their problem.",1,2025-04-09 05:31:41,Excellent_Tubleweed
programming,1jnxz1w,mkt7pvr,"Commenting here to check back, in case a thoughtful discussion happens (apologies for contributing absolutely nothing on that front)",0,2025-04-01 05:12:27,ironykarl
programming,1jkdmh3,mjum7xm,"> Developer tries TDD, attempting to adhere to the steps.

The alternative posed here is (instead of a sequence of steps) an extensive list of suggestions that only make sense in context if you already know TDD... This isn't really an article saving TDD, but instead throwing the idea away by conflating TDD with the value of tests in general and then sort of suggesting that people test.

The only real benefit of TDD is if you give up on any religious notion of unit testing and essentially view writing a test as an exercise in public API design. Remember, it is Test **Driven** Design, not merely tested design. When you are writing your test you should be thinking, ""What do I want the developer experience of using the API I am about to build to be?"" You focus on the public api first and write down the usage of it and make assertions on what it produces. The goal then becomes to implement that API. It is easy to stub implementations and iteratively implement them until you have your test working.

If the setup is extensive and confusing, you should be thinking, how can I make it easier for users of my API to set these things up? You are the first user of your API. Basically, you write an API that you want to work with and then you implement that. If the API irritates you somehow, then you refactor the API while you don't have any code backing it so it is still cheap.

Instead, if you don't think about the API from the usage side first, chances are you complete a full API, but even though it is irritating to use you feel loss aversion when you consider refactoring it so you simply ship it.

Why do I say to give up on religious ideas of unit testing? Because the test you write is going to probably require a bunch of units to coordinate and function and you shouldn't be mocking them just to make that first test work. The simplest ""dependency injection"" I have ever worked with was changing a db connection string to instantiate an in memory sqlite db in place of a real connection. Tests made like that are still incredibly fast and survive refactoring. Ideally, even services can be connected without network hops. They aren't real unit tests nor real integration tests.",5,2025-03-26 15:44:56,Illustrious-Map8639
programming,1jkcfr1,mkn0bbv,Local first sounds rad. All that crypto sounds really complicated.,2,2025-03-31 05:02:48,youngbull
programming,1k53qm4,mof0s4y,"> that FOSS is specifically “forcing charity” on others, which the act itself is not virtuous but vicious

It’s virtuous because it promotes collaboration. Without forced charity, companies just use your free labor without sharing their contributions. Just compare Linux (developed via forced charity) to FreeBSD (no forced charity). One is thriving, the other is all but dead.",16,2025-04-22 12:02:09,Linguistic-mystic
programming,1k53qm4,moha9g1,"This guy seems to have some misunderstandings about what Free Software is, considering that he’s comparing it to OSS.

Free Software I guess is like communism in that it’s about community (whether that’s like “Java is like JavaScript the way that Car is like Carpet” is another story). 

The “freedoms” of free software are the essential freedoms of that community. You don’t have to participate in that community if you don’t want to. Not everyone who uses the GPL buys into this ideology. Linus chose the GPL because of the “share and share alike” practice consequence (which is why Linus is opposed to GPLv3). Others use the GPL as a scheme to sell proprietary licenses.

The GPL is “viral and pernicious” only if you think you are entitled to other people’s work without any obligation. The authors of GPL code believe in these freedoms, and don’t want their code to be used in proprietary software. Forcing those who benefit from the freedoms they were given to give those freedoms to others isn’t “forced charity”, it’s basic respect.

By the way, the fact that software has been getting worse over time has nothing to do with OSS, but that the barrier to entry has been significantly lowered. In the olden days, processing power and memory were scarce, and software had to be written with much greater care. Today, these things are abundant, so a lot less care is required to produce a useable product. This will obviously cause a decrease in quality of software as the quantity of software vastly increases. That has nothing to do with OSS.",5,2025-04-22 19:03:59,TippySkippy12
programming,1k53qm4,mof4gm6,leave it to Twitter to generate discussion like this,1,2025-04-22 12:27:06,bzbub2
programming,1k53qm4,mok9o7r,"We can see an alternative world to free/open source software right now, in the way of websites (free to sign up, ad- and tracking-driven profits), in the Android app store (free to install, ad-, tracking- and compulsion-driven profits) and in ""free-to-play"" games (same as Android apps).

In all those cases the (obvious) prices were also driven to zero, the profits are made in morally very questionable ways. If you wanted to sell an ""honest"" Android App right now, you would also face serious challenges.

In other areas commercial, proprietary software has de-facto monopolies, ie. Microsoft and Adobe. There is also almost no small scale commercial competition and the companies use it to force all their users into even deeper dependencies (you even do not control your own data anymore) and into subscription ""services"".",1,2025-04-23 05:32:56,dravonk
programming,1k53qm4,mokmcye,"I think it’s nice that there were some people who, seeing that software doesn’t fit nicely into existing frameworks of property, wanted to make a world where property was less important.
I don’t think that they necessarily contradict themselves when it comes to other industries which have a lot of intellectual property and trade secrets, maybe people wish that all industries had less intellectual property.

That might seem naive but I think it’s also foolish to think that the way society operates right now is the only or best way it can be.",0,2025-04-23 07:38:38,Ripest_Tomato
programming,1k4j88i,moeniaf,"I'm not particularly convinced that large dependency trees or complex systems are the cause of certain programs running slow. They can cause more space usage on disk and in transit, and if you're fetching dependencies at the last possible moment you'll get some latency annoyances, but _actually slow software_ seems more to be a problem of bad algorithms (accidentally quadratic, all that), and to some extent using an interpreted rather than compiled language, and using a GC language—both of these things are nice to have in general, but they're not entirely free either. Not to mention extraneous network calls and de/serialization: Kubernetes makes it real easy to add another REST microservice, which might be the right call for process isolation or org-chart reasons or whatever, but it also ain't free.

So Pike's slides here just wind up coming off as a non sequitur.

That said, the industry seems pretty well aware of the threat of supply chain attacks, but also that it's worth doing more work through SBOMs, signatures, etc to mitigate that than to lose out on the rich tapestry of available dependencies. At some point between ""rewrite your own `is_even`"" and ""rewrite your own GTK"" pretty much all devs will say ""nah, screw this"".

Ultimately the kind of software asceticism he's arguing for conflicts with both the users' demands for features, and the devs' wish to eliminate toil. It can be pretty great for personal projects, but out on the marketplace or the commons it's going to struggle.

The other part also with CVEs is that … just because you hardcopied something or rolled your own doesn't mean you're now free from CVEs, it just means there's much more work done, highly likely redundant, both to detect and to fix them, rather than updating dependencies.",7,2025-04-22 10:15:00,syklemil
programming,1k4j88i,molcqmu,"“Oh, cool! Rob Pike wrote something on bloat?” *Clicks link* Google Docs shows a “Loading…” message for a few seconds. Closes tab. “Message received.”",5,2025-04-23 11:49:09,HappyAngrySquid
programming,1k4j88i,mobpxpe,Are generics bloat?,5,2025-04-21 21:29:04,PrimozDelux
programming,1k4j88i,moempv4,I agree with much in this presentation and would wish that more software projects try to keep the complexity under control. I am quite afraid of the consequences of large dependency trees and I got the impression that the dangers are often ignored.,2,2025-04-22 10:07:09,dravonk
programming,1k4j88i,mobpd9m,"> Features

Nope. I'm going to stop you right there. Feature != Bloat. I can tell you for a fact that a simple [text editor](https://bold-edit.com/) with LSP/DAP support was less lines than simdjson. The simdjson single header had a lot of repeating code and was about 30K lines. I really did not want to audit that.

Most of the bloat is from dependencies. I got around to replacing simdjson and my binary size was cut in half",5,2025-04-21 21:26:06,levodelellis
programming,1k4j88i,momg8qj,"I would be interested to know the intended audience of the talk because he says we ""must account for the expense of maintenance and growth when deciding to add a feature"" but doesn't mention that corporate incentive structures, where most software is written, generally do not support this at all.  Most famously this is not supported at all by incentives at Google, his longtime employer where everything is beta or deprecated, so he surely knows this.  Maybe he was more focused on open source in this talk.  Similarly 'understanding the costs of your dependencies' and 'examining your dependency tree regularly' are great for libraries or small utilities but no story points are going to get allocated to replacing the left-pad dependency.

Good advertisement for Go though, to his credit he did ship Go with so few features nobody could accuse it of bloat; a lightning fast compiler; and they do try to put every foundational thing they can into the standard library so you don't need external dependencies.",1,2025-04-23 15:29:27,sisyphus
programming,1k1m4oc,mnoi9yg,Very important information for programmers.,1,2025-04-18 00:23:05,BlueGoliath
programming,1k1k786,mnnvfls,"If you want to be a founder do the following:


- make a project that can make you stand out from the crowed of people above your age
- ask your parents to find friends to buy the product from you but never tell anyone they did it
- when you reach certain amount of revenue ask your parents to ask the local news to make a video of you showing you are an entrepreneur
- at age 16 get into one of the top 10 colleges in the USA
- find 2 other co-founders for your AI startup from the same college
- by age 18 have an AI product ready to pitch to YCombinator or other angel investor
- drop the college and work full time
- get funding and pay people to develop the company while you and your co-founders become the face of the company
- by age 21 you will have become billionaire


success in the market is all about collecting results that a few can get and that can be measured. Don't waste your life learning thousands of stacks and technologies because this is not efficient. Learn enough to collect a result that can make people see you are more valuable than other people. Yes, it is all about comparison contrary to what psychology say. If you don't do what I said above you are doomed",-34,2025-04-17 22:10:29,Positive_Method3022
programming,1jz0d2x,mn2frru,PDF here https://github.com/dendibakh/perf-book/releases/tag/2.0_release,3,2025-04-14 14:34:30,ketralnis
programming,1juzs1j,mm6olnp,"This post seems very confused.  Mistake #1 claims:

> `WHERE to_tsvector('english', message) @@ to_tsquery('english', 'research')`

> This forces PostgreSQL to:

> 1. Perform Expensive Computation: Run to_tsvector() (parsing, stemming, etc.) repeatedly for many rows during query execution.

> 2. Limit Index Efficiency: Prevent the most direct and efficient use of the GIN index, even if one exists on the base message column.

And suggests indexing a precalculated tsvector column instead.

This is wrong.  If there is an index on `to_tsvector('english', message)` then it will not need to recalculate the tsvector during the query, and the index will be just as useful (identical, even) as the proposed fix.

This seems like a pretty major thing to get wrong.",1,2025-04-09 09:52:06,therealgaxbo
programming,1jrh3w2,mlj6zvg,So many textboxes... I don't mind filling out surveys but writing essays isn't my style.,3,2025-04-05 12:50:07,pip25hu
programming,1jqwxfi,mlcifr3,How is the proposed change-id diffrerent than the name of the branch that the changes are commited to?,-3,2025-04-04 09:32:34,Skaarj
programming,1jqwxfi,mlbxilo,"I wonder, why are they not exploring placing the change id as part of the commit metadata; of course with upstream change.",-3,2025-04-04 05:59:39,Venthe
programming,1jqwv8q,mlbpotm,Will the lecture videos be available to the public?,2,2025-04-04 04:50:30,highview
programming,1jqwv8q,mlc5os8,Thanks for sharing. Definitely looks interesting. Will check it out,1,2025-04-04 07:14:19,jduyhdhsksfhd
programming,1jnx6uh,mkoqcro,"> I am looking for ideas to minimize the weights loading time. Any idea on how I can improve this?

Faster disk or more RAM?",2,2025-03-31 14:03:03,puddingfox
programming,1jnx6uh,mktakyq,Are the weights compressed? If not do so and load them on a second thread. I/O-bound operations don’t get penalized by the GIL.,2,2025-04-01 05:39:15,Wonderful-Wind-5736
programming,1jnx6uh,mkxgte6,I haven’t looked into the implementation but do you know if there layers are fully connected? Could you avoid loading the nodes in the next layer that don’t receive input?,1,2025-04-01 22:08:43,raiango
programming,1jnx6uh,mko80il,How do we get it where it doesn't censor things?,-4,2025-03-31 12:09:31,One_Being7941
programming,1k5it2y,moih3ih,https://xkcd.com/927/,10,2025-04-22 22:43:08,Unlikely_Response125
programming,1k5it2y,mojzgoq,"Oh, come on!",7,2025-04-23 04:09:41,RedEyed__
programming,1k5it2y,mokwfrv,"Too much magic in my opinion, and the `prevTargetValue` thing will not work when an attribute relies on multiple other attributes. The animation syntax also makes little sense when you could've done something like `{values:[...], step: 50, interval: 10}`",3,2025-04-23 09:27:36,SZenC
programming,1k5bdoc,moj6uhp,Wow this is awesome,1,2025-04-23 01:09:34,Interesting-Story405
programming,1k4jabg,mofres1,Congratulations! You're making progress where it really counts. ,1,2025-04-22 14:37:32,Wonderful-Wind-5736
programming,1k4iwjg,moakm5h,This is an interesting approach to organize source code. Remins me a little of how Smalltalk's Code Browser does.,2,2025-04-21 18:04:11,6502zx81
programming,1k4iwjg,moay7bx,Is that you TopMind?,1,2025-04-21 19:10:59,PerceptionWinter3674
programming,1k4iwjg,mofqxv2,"Where do I try the web prototype? 

I imagine you could make it work for a Forth, or Lisp-like language pretty easily",1,2025-04-22 14:35:11,Zireael07
programming,1k2t11l,mnwprph,Wonderful video. Keep up the good work. Thanks for sharing,3,2025-04-19 10:59:40,PossibleCicada4926
programming,1jzyg9j,mnaq30t,"This is a rather long-winded way of saying ""I think React Server Components are cool"".",3,2025-04-15 20:46:52,pip25hu
programming,1jz8e2t,mn4addt,"Emacs' [maggit](https://github.com/magit/magit) has been doing this for awhile and remains the best git interface available in 2025.

Long live Emacs! Long live Maggit!",1,2025-04-14 20:07:19,church-rosser
programming,1jyz41g,mn2m86d,Can’t you just save it as a PWA?,23,2025-04-14 15:07:45,Pattycakes_wcp
programming,1jyz41g,mn2d67c,But why? Is this literally not just a browser shipped to visit their website or are you only using their APIs and building your own UI on top?,26,2025-04-14 14:20:45,Valuable-Yard3577
programming,1jyz41g,mn2m6uw,The people yearn for progressive web apps,24,2025-04-14 15:07:33,caschb
programming,1jyz41g,mn26vd2,Nice work OP! What made you decide into making a wrapper instead of going through a browser? More direct? Fun little project? Or are there any other benefits besides that?,3,2025-04-14 13:46:22,ExclusiveOne
programming,1jyz41g,mn26bhw,"The Crunchyroll license classifies redistribution as commercial activity, which would include GitHub releases.

Since this is a wrapper that doesn't distribute any code belonging to Crunchyroll, you can simply license as MIT without problems.

Have you considered publishing a Flatpak?",7,2025-04-14 13:43:15,KrazyKirby99999
programming,1jyz41g,mn55uj7,"To all the comments that say I simply could've used PWAs (Progressive Web Applications), I did a quick test and most of the PWAs don't work and show a DRM error.  
This is simply due to inconsistent DRM support on PWAs.

The release contains a custom compiled Electron binary with WidevineCDM support that fixes this issue and is much more reliable and consistent than the PWAs.",2,2025-04-14 22:57:39,Mean_Option_7459
programming,1jyz41g,mn6x98g,"Out of curiosity, why disable the inspector/F12 tools?",1,2025-04-15 06:12:05,GasterIHardlyKnowHer
programming,1jy2p1u,mmww06b,"Not understanding HTML entities, tho.",3,2025-04-13 15:57:08,DaveVdE
programming,1jv639a,mm8vakd,"Cool! I'm a Big proponent of re-/writing shell scripts in a language suitable to the project & task. Bash/sh-the-language is... weird, and most people write it infrequently enough that they need to relearn all the tricks and pitfalls each time. I've used several similar tools, like Rscript, Escript (for Erlang), 

Lua seems like a good candidate for shell scripting, seeing as it's foremost intended to be an easy, interactive embeddable scripting language. There are some things missing that would be nice, like argument parsing or json stuff, and as far as I can tell there's no way to install packages programmatically to supplement.

Luash seems interesting, though I'd worry that it might tempt people into word-for-word rewrites while avoiding Lua's native functionality, which wouldn't provide as much benefit.

My preferred tool for this is Babashka, which is a scripting runtime for Clojure. I rarely need to shell out to external programs so my scripts are more easily cross-platform, it includes a task runner and argument-parsing library, json/xml/csv/yaml/edn libraries, and I can add one-off versioned dependencies from within the script itself. It's a great all-round experience, tbh.",6,2025-04-09 17:31:45,11fdriver
programming,1jv639a,mm9vjjq,"If it's more complex than running a few commands, then I just jump up to Python. Likely to be installed by default on many Linux distros.

And if you're doing something a bit more complex that needs dependencies, you can use ""uv run"" to manage that for you: https://simonwillison.net/2024/Aug/21/usrbinenv-uv-run/",4,2025-04-09 20:25:55,lotanis
programming,1jv639a,mmaf24w,"But ... a shell script? That's not written in lua...

> Handling strings with Lua’s string manipulation functions is undoubtedly productive and faster in shell scripting

I never understood why shell scripts are used so widely on Linux. I always felt as if I would cripple myself using shell scripts. Ruby replaced all shell scripts I'd ever need to use (save for a few bootstrap-related shell scripts I still keep).

I distinctly dislike how arguments are passed into functions in shell scripts. It seems not a clever approach.",3,2025-04-09 22:06:08,shevy-java
programming,1jv639a,mm82mu3,"Been having a nice time with Lua again this week for some gamedev, but I hadn't heard of the Luash project! Looks good",1,2025-04-09 15:11:57,Isogash
programming,1ju6zz5,mm2p3km,you're just on time with your post :),2,2025-04-08 18:09:40,ilham_israfilov
programming,1jszrp4,mlte4k2,"It’s interesting how much this reminds me of the first time I wrote Go some 10 years ago. It’s way over engineered, but I think that’s part of the learning process.

If I had to teach someone from scratch, I would say just put it all in a single file, get it working, then break it up into packages after you have your implementation surface how you like it. It’s a similar concept to TDD, but slightly less rigid.

Good job learning though, keep going!

edit:

Also, you can template migrations and use go-migrate as a library, fyi.",3,2025-04-07 04:53:37,Cidan
