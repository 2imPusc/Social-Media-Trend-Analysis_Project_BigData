subreddit,post_id,comment_id,comment_content,comment_score,comment_created_at,comment_author
programming,1jqmipt,ml8s369,"I liked the article,light and easy to consume with good points to consider. Thanks.",4,2025-04-03 18:29:26,johnmc325
programming,1jqmipt,mlaptro,"I'm not convinced that old versions should become unsupported. The point of an API is to provide access to a wide range of clients and some are not that easy to update (also why they should be required to be updated when there is no reason).

You could almost always implement the old version by calling into the new version internally if it's annoying to maintain, this way it is done only once. It also encourages to design the API well so you don't have to create that many versions.

Most usages would gravitate naturally to use the newer versions as most people would update the applications so it shouldn't represent an increased load overally.",1,2025-04-04 00:45:51,jezek_2
programming,1jqmipt,mlbv0hl,Just host the new version of the API on a subdomain which is the short sha of the change commit. That'll keep people busy.,0,2025-04-04 05:36:41,elmuerte
programming,1jqctx0,ml7p7xu,"In K&R2, nested arrays are *specified* as having all of their elements placed in one continguous region of storage, with the last element of all but the last row specified as immediately preceding the first element fo the next row.  Because of this, and the fact that indexing was *defined* in terms of address computations, given \`int arr\[5\]\[3\]\` and a value \`i\` in the range 0 to 14 (inclusive), `arr[i/3][j%3]` was equivalent *by specification* to `arr[0][i]`.

C99, in a *non-normative annex*, and with *no normative justification*, broke the language by saying that an attempt to access an array with an inner subscript that wasn't within range of the inner array invoked Undefined Behavior, even if the access would fall within the range of a containing array.",3,2025-04-03 15:19:24,flatfinger
programming,1jqctx0,ml6lu4s,"My language of choice, Common Lisp, handles multi dimensional arrays with no problems. Strongly typed garbage collected language FTW!

Not everything true of C/++ is true for other languages.",4,2025-04-03 11:31:29,church-rosser
programming,1jqctx0,ml87kgq,"Arrays were the first thing that I remember having an ""oooooh...that's how that works"" moment in programming.

I learned about them in college but it was still pretty abstract. It wasn't until I got my first job and I had to use them that it really clicked. And it really did feel like like something clicked into place in my brain. Such a wonderful feeling.",1,2025-04-03 16:49:39,ThisIsMyCouchAccount
programming,1jqctx0,mm54sam,"`a[0][i]` is ugly and gross anyway.  It seems to me that if you want to access a multi-dimensional array as a linear array, you should just cast it in the first place:

```
#include <stdio.h>

#define ROWS (2)
#define COLS (4)

int main()
{
  int a[ROWS][COLS] = { { 0, 1, 2, 3 }, { 4, 5, 6, 7 } };
  for (int i = 0; i < ROWS * COLS; ++i)
  {
    printf("" %d"", ((int*)a)[i]);
  }
  
  return 0;
}
```
which I believe should be well-defined.",1,2025-04-09 01:55:12,ozyx7
programming,1jps2jt,ml4u29g,I really liked the last video i saw from this guy. But this mic sounds like its under water or compressed to shit or something. I'm still going to make it through based on the last video. Please fix it if op is the author.,1,2025-04-03 02:12:29,todo_code
programming,1jnz0ka,mknrhqm,I thought this was the building designer from Sim City 2000.,2,2025-03-31 09:46:40,binarypie
programming,1jnz0ka,mkok7qn,"Cool, the graphics slightly remind me of roller coaster tycoon scenery graphics. Though the basic code gives me PTSD from times I've had to touch pascal because I really don't like the ""then if else end"" syntax, I prefer the curly braces.",1,2025-03-31 13:28:27,Harha
programming,1jn74ag,mkhn98x,"Interesting! Definitely going to follow this. Local search is always a challenge, and most of the times it results in some very simple techniques with suboptimal results",6,2025-03-30 08:34:25,robbiedobbie
programming,1k5bk1s,mok83tz,testcontainers work great and are made for this: https://testcontainers.com/modules/postgresql/,1,2025-04-23 05:18:46,chipstastegood
programming,1k5bk1s,molggyb,"A technique I've never seen anyone mention... build your app with multi-tenancy keys in mind, even if there is only every one tenant. Every database model I create has a root ""app"" table. Every other table references a record in app (by default, the first app == id: 1). Then when you run database tests, each test can start by creating a new app. They won't conflict which each other because all of the code is written to contextually operate within the multi-tenant 'app'. You can use rollback transactions or not. You don't need to recreate all tables (slow). You can investigate the generated data from each test run, by filtering by the app.id created in that test.",1,2025-04-23 12:14:46,roryl
programming,1k5bk1s,mogn7i7,I think rails does this right,0,2025-04-22 17:12:14,Alarming_Hand_9919
programming,1k54lvz,mokk0zw,What's the difference between webextensions and regular chrome extensions?,1,2025-04-23 07:13:45,remenic
programming,1k4j90u,mom6jz8,"I don't mind the idea of vendoring as such, but I won't use them until Dependabot or similar tools support the vendoring automation solution.",1,2025-04-23 14:42:07,yxhuvud
programming,1k4j90u,moaobp7,"There is no reason (to me) to forgo normal dependency management in a world that has working dependency managers, unless you are prepared to effectively fork libraryX.

And that is not necessarily just a scare-statement, I think there is sometimes too much reluctance to just go ahead and fork things, but I don't believe there is value in vendoring without this in mind",1,2025-04-21 18:22:18,bzbub2
programming,1k1pkys,mnobcyc,Awesome!,1,2025-04-17 23:41:50,Efficient_Suit_1030
programming,1jyir70,mmyrbps,Centering a div is the hardest programming problem in the history of programming.,1,2025-04-13 21:53:41,BlueGoliath
programming,1jxnw6v,mmrukt8,"I was wondering, is the layout and screenshots fine? If there isn't a problem I'll write pages like this every week. I won't be posting to this sub every week, maybe once a month",2,2025-04-12 18:29:03,levodelellis
programming,1jxllin,mmt21vp,Congratulations on a job well done. :),2,2025-04-12 22:36:14,zhivago
programming,1jxllin,mmt6wn1,Year of the esolang.,2,2025-04-12 23:07:01,BlueGoliath
programming,1jx23t3,mmrkihn,"`git pull && git log`

Or if you're that ambitious https://git-scm.com/docs/githooks#_post_merge

But never npm anything in my git flow 🤦",2,2025-04-12 17:36:24,Serious-Regular
programming,1jwp95k,mmm41cp,"He mentions the legend Brian Kernighan at 41:22. This in turn reminds me of a young Brian Kernighan here: https://www.youtube.com/watch?v=tc4ROCJYbm0 where he shows pipes under UNIX, at ~ 18:28.",2,2025-04-11 19:19:38,shevy-java
programming,1jwc15d,mmh6e1i,"Hey all! Just dropped the second part of my two-parter explaining how to use python to extract table data from a set of Word / docx files and merge them into a different Word template! 

Cool little gig, saved these guys a few thousand bucks with a couple days' work so thought it might be nice to share the process!

Part two covers the merging and of the csv into the intergrated report format:
https://peakd.com/hive-169321/@coderad/how-i-saved-100s-of-hours-of-work-for-a-local-company-using-python-and-python-docx-n00b-friendly-part-22

Here's the first bit, if you missed it covering the data extraction to csv files (and getting the gig in the first place!):

https://peakd.com/hive-169321/@coderad/how-i-saved-100s-of-hours-of-work-for-a-local-company-using-python-and-python-docx-n00b-friendly-part-12

Cheers

CodeRad",1,2025-04-10 23:32:42,CodeRadDesign
programming,1jv4hby,mm7b6yc,"Seems like the thing to get in front of is actually having deterministic command lines in production. Good grief.

Also, the ordering of arguments in bash wildcard expansion isn't ""alphanumeric-ish"", it strictly follows the LC_COLLATE environment variable.",12,2025-04-09 12:46:15,falconindy
programming,1jv4hby,mm96pj7,I’ve seen issues with FS ordering before with Spring since the order of class initialization depends on the order in the JAR which depends on the order of the FS unless you are careful.,1,2025-04-09 18:25:19,slaymaker1907
programming,1jttpad,mm3rb6q,"50 years is not only the age of C, but also the age of the first open source supply chain attack - the aforementioned self-modifying C compiler that would inject a backdoor whenever it compiled the file handling the login sequence.

Things move slow in the software industry.",1,2025-04-08 21:14:55,flundstrom2
programming,1jqx08u,mlcd8dc,Crust?,2,2025-04-04 08:36:08,Batteredcode
programming,1jqp7fi,mlc562o,Typescript? Don't people know javascript anymore?,-8,2025-04-04 07:08:48,BasieP2
programming,1joai0u,ml8d24n,Science has gone too far!!,1,2025-04-03 17:16:22,zombiecalypse
programming,1jkb57i,mjxdgjf,"ES2020 was 5 years ago and browsers were implementing BigInt long before that.

The biggest problem with BigInt is performance. Whether it's inherent to the spec or a lack of optimization, even small numbers that should be representable by 31-bit ints (the same ones they use to represent most numbers in JS behind the scenes) they are massively slower.

Add in the proposal to use the Math library taking forever and it's pretty easy to see why they aren't very common.",14,2025-03-26 23:50:59,theQuandary
programming,1jkb57i,mjttgpn,"More langauges should have base 10 floating point numbers like C# has the Decimal data type.

Sure there will be a performance pentalty, but they are so much more intuitive for people to work with. Most people will understand limitations like not being able to perfectly represent 1/3 because it's a repeating decimal in our normal everyday number system. Similar to how you can't represent the exact value of pi or e in any base. Not being able to properly represent numbers like 0.1 just causes a lot of headaches and confusion for programmers.

With how common it is to use computers for financial calculations, not having a native base 10 decimal datatype seems like major feature that's missing. That's not to say that binary floating point shouldn't be there, but support for base 10 floating points should be right up there with support for strings and dates.",16,2025-03-26 13:14:26,w1n5t0nM1k3y
programming,1jkb57i,mjz0gw3,"Floats are a fine choice for numbers in a scripting language. An integer range of +/-2^53 should be enough for most practical applications. As for the classic `0.3 - 0.1` example, I'm sorry, but I think this is a skill issue. I can't remember the last time I was tripped up by this kind of thing. I probably was at some point, but these aren't difficult lessons to learn. Programmers should understand how floats work.

Bitwise ops truncating to 32 bits is a trade-off with several icky alternatives: Should they truncate to a larger bit width up to 53? Should they cast to a 64 bit integer type? How would that type interact with JS's existing mess of duck typed weirdness?

I'm a little biased because I'm building a language, and I've decided to make the same design decisions, or maybe repeat the same mistakes. Floats are far from perfect, but using them exclusively works 99% of the time, gets you reasonably good performance, and saves you from worrying about overflows or casts.

Can't say I disagree with the overall conclusion though. In a mature general purpose language, there should be more options with better support.",3,2025-03-27 06:46:15,birdbrainswagtrain
programming,1jkb57i,mjxgahw,"Interesting though I'm not in complete agreement.  
  
I don't want something like BigInt to be the default next step because its literally 99% slower performance then Number and thta alone has been an issue I've faced many times. I want there to be a base number how it currently is, a bigint with better JSON support, a BigNumber that can handle any float precision, a 64-bit signed and unsigned number. 5 types, all different use-cases, 3 of them having great performance, all can handle arithmetic operations syntax.

I don't get why we can add dumb crap like pipelines and yet another Symbol like type, but expanding how we deal with numbers is somehow stuck in the stone age with this language.

Side note, I will always be annoyed AF that bit manipulation has been relegated to 32-bits. So stupid.",5,2025-03-27 00:06:46,Craiggles-
programming,1jkb57i,mjyrvag,"> You know, complex decimals like 0.1

Actually, that value is complex in base 2. It's odd to say this given that he spends so much time explaining how floating poibts work.",1,2025-03-27 05:19:49,NiteShdw
programming,1jkb57i,mjyrwz5,"The reason why bigint is not default, is because it is  soooo slow.   
It is basically a [dynamic array of bytes](https://docs.openssl.org/1.0.2/man3/bn/#synopsis) with software implemented operations like sum, multiple, shift (not CPU).",1,2025-03-27 05:20:15,RedEyed__
programming,1jkb57i,mjygwkv,"JavaScript (as language) annoys me. I don't have any good work around (aka to not use JavaScript would mean I would forego its benefits in the browser ecosystem), but I'd love to leave it behind. If only WebAssembly could truly free us from JavaScript ...",0,2025-03-27 03:49:48,shevy-java
programming,1jkb57i,mjuh2ju,This article assumes a javascript person knows what bitwise operators are.,-13,2025-03-26 15:19:07,NenAlienGeenKonijn
programming,1jizayn,mjq6qtq,"When I saw that examples are in PHP, I reflexively checked the date of the post. But it turns out it's not from 2010...

PS. Good stuff.",1,2025-03-25 21:26:16,steve-7890
programming,1jixx9a,mjjfcv0,"Just use an RPC, you're soooo close to getting it.

https://connectrpc.com/",-1,2025-03-24 20:23:19,twoism
programming,1k4ivzj,mod1rjk,"Oh my...

That's certainly something. Tcl is one of the more bizarre languages I've used to any degree, but I also found it quite nice. Or at least, it was bar the RYO-metaprogramming.",2,2025-04-22 02:00:02,11fdriver
programming,1k4ivzj,modfm0j,"This is one of those things that the closer I look, the worse it gets.

To start with, I already think languages should take a stand and choose *either* keyword args or positional args, (positional for functional style programming, keyword for expression manipulation style).  So the goal to add more types of arguments to a language is one I think is actually bad out of the gate.

But if we suppose that it is our objective, then I would imagine the solution to not involve regex or whatever that quasiquote function is doing.  I suspect the reason they're being used is that we're actually trying to solve several problems at once:

* making tcl proc definitions handle optional parameters at any position
* making tcl procs accept flags at any position
* making tcl accept named parameters

and I think trying to tackle all of this at once has created some of the... bizzareness.

Moreover, it is not at all obvious how the precedence is supposed to work here.  The second example was particularly horrifying to me:
```
p -opt bar -flag 1 a; # => flag=1 opt=bar x=1 args=a
```
why is it not
```
flag=1 opt=bar x=a args=
```
or 
```
flag=1 opt=1 x=bar args=1 a
```
instead?  Well, because you *just have to know* that if the variable has a default parameter, it can't be a flag even if it looks like one.

This would be hell to consume in a library.  I can't even guess if your code handles the following:

```
p -opt -flag;
p -opt -opt -flag -flag;
p -opt -flag -opt 1;
```",1,2025-04-22 03:24:47,Bloaf
programming,1k2rcre,mnxttgw,">When multiple services share one cache cluster, they compete for the same memory and eviction policies. A heavy workload from Service A can evict critical data for Service B, leading to timeouts or stale responses at peak traffic.

Doesn't this mean service A and B are too dissimilar to share the same cache?

>Now let’s say your cache memory is full, and the eviction policy you set starts triggering. You start seeing your TotalKeys metric going down drastically, you would want to understand immediately which service is affected, but it’s much more complex now.

Why would you start evicting cached items when memory is full? I get not adding more cached items, but wouldn't you want to implement a LRU cache policy so that only old unused items are evicted? And if there are no items old enough items to evict without impacting performance, that means you need to scale your cache, or implement some back off, right?

>On top of that, the affect on multiple services in that case might be even harder to detect, because if we have 5 services that use the cache, and now the eviction policy evicted millions of keys, it might be that one service lost 950k keys, and another lost 50k keys and that makes debugging harder.

Are cache misses not a reported metric in your system? If performance is degrading on a service who's had hot items removed from a cache, knowing the service has a lot of cache misses would indicate this. And of course, why are heavily used cached data being evicted in the first place?

>If a single service would lose 1 million keys the affect on the service would probably be more noticeable on other metrics, but if we just lost 50k maybe that won’t affect the service as much?

Is this a question? I would expect the service that lost 1 million cached items to degrade in performance more than the one that lost 50k, but if that's 50k of heavily used cache entries, then maybe it has a big impact. In either case, you have the metrics on your example system here, what did you see?",0,2025-04-19 15:23:20,Doxterpepper
programming,1jycqo2,mmxhtcw,"Cool idea, but I can’t come up with any interesting use cases — drop yours in the replies!",3,2025-04-13 17:49:29,viktorzub
programming,1jycqo2,mn04d4e,"Set up a debezium connector to a MySQL host and stream table x to topic y with schema z, aggregate field xyz using KSql and stream the results to topic abc.",2,2025-04-14 03:03:14,saposmak
programming,1jvcvm0,mm9q1pg,"Looks cool, I like that it makes this sort of thing more accessible. I setup a C++ OpenGL project to compile shaders and apply them to an MP4 video, it's cool but an absolute ballache. It's good that this is more accessible with this project",2,2025-04-09 19:59:31,AshKetchupppp
programming,1jutxee,mm6ljgy,"Very interesting for data versioning and such.

How fast would wire it up if the git repo and up being a 1GB, 10GB, 100GB database?",2,2025-04-09 09:20:09,badpotato
programming,1jutxee,mmiqf7f,"Does it use existing git repos? Can you ""import"" an existing git repo and access its data?",1,2025-04-11 06:03:35,mc_chad
programming,1jtlldw,mlvpres,"Very, _very_ cool!
Thanks for making and sharing Easylang!",4,2025-04-07 15:51:18,eddavis2
programming,1jqwx13,mli8d4n,The bots don't even bother anymore.,2,2025-04-05 07:07:28,BloomAppleOrangeSeat
programming,1jqtwzi,mla4yue,nice ..having a simple example like this is a great reference for other implementors,1,2025-04-03 22:41:14,bzbub2
programming,1jk9ei0,mk1bkel,"A great article that unfortunately will be overlooked by many due to its verbosity. As a person who does a lot of troubleshooting myself as part of my career, I agree with all of the main points: establish the boundaries of the problem and start hacking big chunks away using something as close to binary search as possible in order to corner the problem efficiently. Don't get caught in a corner yourself - step back and reflect if you are searching in the right places. 

If after doing your best cornering the issue,  you don't have enough expertise to figure it out, do your best to learn from your helpers who have, because in order to solve the problem, you need to understand it first: both the issue and potential reasons causing it. This of course will be the way to develop your own skills",2,2025-03-27 16:32:24,xebecv
programming,1jjbnji,mjmo7pw,"What would be interesting would be a critical historic analysis.

The internet changed massively, from the 1990s to the 2000s to now. I am not necessarily implying that ""the past was so much better"", but there are many things I preferred more in the past - no one-browser-rules-them-all, but also old flash games and even older java applets games, not all of which appear to have been converted to HTML5 etc ...

The death of many webpages too - the waymachine does not seem to be able to capture all of that (or perhaps I am just not as good at finding things nowadays... Google search also to be better). Naturally many things also got better, so I am not saying ""everything was better"", but some things were better and we appear to have lost quite a bit in this regard. Young people today may never fully understand what was lost, even if it may not affect them as the new shiny replacements work well.",1,2025-03-25 10:00:42,shevy-java
programming,1k5bkbk,mohaerh,More dependence on frameworks... less developer knowledge of underlying systems.  Awesome...,2,2025-04-22 19:04:43,BotBarrier
programming,1k0mioe,mnjrmbh,"""Atomicless concurrency""
Look inside -> atomics",4,2025-04-17 07:43:24,csdt0
programming,1k0az4g,mndsx7c,"This article describes a mysterious issue causing Varnish Cache to hang unexpectedly, particularly on weekend mornings. The core issue was traced to the interaction between a large number of **object variants** (created by using Vary: User-Agent and long TTLs) and a growing list of **bans**. When a request came in for a resource with many variants, Varnish would linearly search through each variant and check it against all active bans before finding a match.

The problem was exacerbated by a high TTL for ""hit-for-miss"" (uncacheable) objects, leading to a significant accumulation of variants over time, especially since deployments (which clear the cache) were less frequent on weekends. The steady addition of bans throughout the week, combined with lower traffic overnight, created a scenario where on Saturday mornings, the first request for a popular but now-banned resource with many variants would trigger an extremely long processing time (potentially hundreds of millions of ban-object checks). This held a mutex lock, blocked other requests, exhausted the thread pool, and ultimately caused Varnish to become unresponsive.

The article highlights that the lurker, a background process for applying bans, couldn't keep up with the rate of ban creation when the number of cached objects (including hit-for-miss markers) was high.

To address this, the author proposed a change to Varnish's invalidation mechanism. This led to the introduction of the ban\_any\_variant parameter in **Varnish Cache 7.7**. This new parameter controls the order of operations:

* **Old behavior (default in 7.7 for the first 10,000 variants):** Check all variants against bans first, then find a variant that matches the request's Vary headers.
* **New behavior (default in 8.0, can be enabled in 7.7 by setting ban\_any\_variant=0):** First, find the variant that matches the request's Vary headers, and then check only that variant against the bans.

This change significantly reduces the complexity of cache lookups in scenarios with many variants and bans, preventing the long processing times and subsequent hangs. The article demonstrates a substantial improvement in response time when the new behavior is enabled under problematic conditions. The author also details how reducing the TTL for hit-for-miss objects helped mitigate the issue in older Varnish versions.",4,2025-04-16 09:57:33,crazzydriver77
programming,1jzt7bc,mnajwam,bold forward thinking intro. pretty cool,2,2025-04-15 20:16:16,bzbub2
programming,1jzt7bc,mnd2zwd,"Neat, didn’t relational model go head to head with the network model for quite some time? And the less popular, hierarchical model?",2,2025-04-16 05:29:28,DuckDatum
programming,1jzlw03,mnc803y,What visualizer is used to make this video? Looks very cool,3,2025-04-16 01:50:25,Jedi-Master_Kenobi
programming,1jwiqw7,mmiptx9,That invokedynamic thing sounds interesting. Sure would be nice to have a presentation on it.,1,2025-04-11 05:58:02,BlueGoliath
programming,1jvby65,mm8zaek,"Mediant32 is mostly an exercise in recreational number theory.  
It's an alternative to fixed-point and floating-point for integer-only AI compute.

It features

1. Zero floating point ops. One works entirely in the field of rationals (integer fractions)/

2. Easy arithemtic accuracy measurements. One can maintain a running sum of all rounding errors and use these errors to improve accuracy, or guide the optimizer towards a certain objective.

3. Ops like Softmax, Logarithm, Square-root are all done with integers.",1,2025-04-09 17:50:10,DataBaeBee
programming,1jv3n4m,mm7e1or,Solved: Use static methods for construction,22,2025-04-09 13:03:12,silent_b
programming,1jv3n4m,mm9hh72,"This was the exact path we took when I was working on Windows Mobile / Windows Phone at the beginning of this century.  That product ended up not being very successful for a lot for reasons, but to this day I think the decision to write in C++, and not use exceptions was one snowflake in the avalanche.

The first thing to note is that C++ without exceptions undermines one of the very first reasons he gave for using C++ over C in the first place -- the standard library of data structures, including string and vector.  But, if you're using the STL without using exceptions, then you're not really using the STL, because the STL does everything that the author finds problematic: it allocates memory in the constructor, and **memory allocation failure is the most common error state you want to defend against.**  (At least -- it was in our context.  In some contexts, particularly in Linux, the allocator will freely overcommit and you only get an AV when you try to use the memory, or the OOM killer sends a signal to kill your process, neither of which is *great*, but to some extent, denying the problem exists and just *assuming* you have all the memory you need is a workable strategy in practice).  
  
 Consequently we had to ""re-invent"" our own janky STL implementation where anything that could fail, or anything that called something that could failed, was a static method that returned bool, and just ... at this point, you're fighting the language at this point, because this includes things that the compiler will happily implement for you like operator= and copy constructors.

The second thing to note is that the author uses the term ""undefined behavior"" to me something quite different than what C++ standard means.  Undefined behavior means that the behavior is literally undefined.  For example, what happens if you dereference a null pointer?  It could crash your process.  Or it could silently do nothing.  Or it could format your hard drive.  The compiler is free to assume that dereferencing null pointers never happen and can make optimization decisions based on this assumption which are counterintuitive (not only doing dead code elimination of things that happen AFTER the null pointer dereference, but changing the behavior of code leading up to it as well).

Exceptions are not undefined behavior.  They're *expected* to happen.  Not frequently, to be sure, but they have perfectly well defined behavior.  The ""undefined behavior"" the author mention is that the programmer doesn't *understand* the behavior or didn't *consider* the behavior (which makes sense, because so many C++ programmers are actually just C programmers in disguise and either don't know about, or firmly reject, any concept in CS besides what can be found in C).  And because of their lack of understanding, they wrote a bug.  

This is not something I will say frequently about C++ -- because I freely admit it's an overcomplicated bodge of a language with footguns everywhere -- but when it comes to exceptions, they got it right.  This isn't a problem with the language, it's just a skill issue.

The ""decoupling"" between where an error is generated and where it is handled is actually not a problem -- for the reason that 99% of error ""handling"" is no more advanced than ""if err return"".  RAII ensures memory is freed and resources are unwound as the exception passes through the stack.  There rarely any reason to write try/finally except at the very topmost level where you pop up a dialog or return a HTTP 500 error code or what have you.  What exceptions give you is the ability to affect a **nonlocal return**, which is actually a very powerful concept that massively simplifies the boilerplate and eliminates ""oops I forgot to if err return"" as a category of bugs.",7,2025-04-09 19:18:01,cashto
programming,1jv3n4m,mm75raq,"This is interesting.... but with respect, is there a reason for posting a 2012 blog post now? Is there something new to be learned here?",27,2025-04-09 12:11:35,CodeAndBiscuits
programming,1jv3n4m,mm74scn,I don't understand how this is a c vs c++ discussion. You could've implemented all these things in c++. It's a matter of using right tools for your use cases,16,2025-04-09 12:05:01,yanitrix
programming,1jv3n4m,mm7ffh2,"Reminds me of the nightmare (ok, mildly annoying and time-wasting few days) I had with a C++ library that didn’t document which of its routines might throw an exception.  So I had to add try/catch blocks in every place I used any of it, no matter how innocuous it seemed.",2,2025-04-09 13:11:19,ambientocclusion
programming,1jv3n4m,mm8a9o5,"I always liked that the ada Ravenscar profile (I think that's the one, it's been a decade) restricted the exceptions to be caught either in the subprogram in which it was raised, or the system. No ambiguity over where it would be caught.",1,2025-04-09 15:49:38,pfp-disciple
programming,1jv3n4m,mmqc4zm,"C is always an inferior choice compared to C++ as it requires more code to get the job done, plus manual resource management and even a simple thing as concatenating strings becomes a nightmare in C.",1,2025-04-12 13:40:38,SergiusTheBest
programming,1jv3n4m,mmr1yq8,">Library of data structures and algorithms (STL) is part of the language. With C I would have to either depend on a 3rd party library or had to write basic algorithms of my own in 1970's manner.

This is honestly not as big of a problem as people make it out to be. Sure, it’s nice to have it when you’re trying to bang out code quickly. When you’re in a long standing project, it’s basically nothing. 

>C++ enforces some basic consistency in the coding style. For example, having the implicit 'this' parameter doesn't allow to pass pointer to the object being worked on using several disparate mechanisms as it often happens to be the case with C projects. Same applies to explicit marking of member variables as private and many other features of the language.

I do tend to agree that having some basic syntax sugar on objects would be nice for C

>This point is actually a subset of the previous one, but it's worth of explicit mention: Implementing virtual functions in C is pretty complex and tends to be slightly different for each class which makes understanding and managing the code a pain.

Eh. I honestly haven’t missed vtables. You do need to stop thinking in OO, but it has fundamentally not been something I look back and ever wish I had. 

>And finally: Everybody loves destructors being invoked automatically at the end of the block.

Personally I’m not a huge fan of implicitly called code that you just need to know about when where and why it gets called. I suppose a very minimal amount, very tightly controlled is probably fine. C++ has like an entire encyclopedia of implicitly called code rules though, and it’s madness. 

I don’t really personay see these as justification of picking C++ over any C-like simple language. ",1,2025-04-12 16:01:23,uCodeSherpa
programming,1jv3n4m,mm72z6h,Great read. Thanks for the post,1,2025-04-09 11:52:35,ByronEster
programming,1jpirx7,ml5whou,No,6,2025-04-03 07:22:20,amyts
programming,1jpirx7,mlj0oe0,"That's nice and all, but it's simpler to just sync all CUD operations.",1,2025-04-05 12:01:31,Blue_Moon_Lake
programming,1jox2r3,ml10f95,Added example files demonstrating the usage of AnuDB.,1,2025-04-02 14:24:50,Fine-Package-5488
programming,1jl1mwe,mki2865,[deleted],1,2025-03-30 11:13:02,N/A
programming,1k5a18t,mogdngm,You have my attention.,2,2025-04-22 16:26:09,blowmage
programming,1k4u4o2,moebezu,Paywalled. Even the link to 'read for free' doesn't work.,1,2025-04-22 08:05:34,GimmickNG
programming,1k4qqjh,mohubk4,"пидрофойл, rofl",1,2025-04-22 20:42:53,Legitimate-Soft-2802
programming,1k4qqjh,moc74bi,"Quite an unfortunate naming choice, it reminds me of Pidora fiasco…",1,2025-04-21 23:04:08,heraldev
programming,1k4j2wm,mocvhj2,"I'm sorry, I wanted to get through it, but whatever that glowy effect on the left is kept spilling over into the article and I couldn't process what you were saying.",1,2025-04-22 01:23:40,CodeAndBiscuits
programming,1k4j2wm,mody4ca,"Here’s my take on error handling:

1| A single kind of exception (i.e what Rust calls “panic”) which unwinds the stack and provides a stack trace. This is for low-level errors like out of bounds, null pointer deref, stack overflow or OOM.

2| Errors as values, but language should segregate errors from normal values. Syntax like `ReturnType ! ErrorType`.

3| Question mark operator like in Rust but with the ability to provide an error message: `foo.unwrap() ? “frobnicating” + frobId + “,”`. This text message doesn’t replace a preexisting error msg chain but adds to it, so in case of a deeply nested error you get a compound text like

> user 123, frobnicating 765, in file foo.txt

This is IMO better than stack traces because it includes actual data at every point of the error chain. Stack traces are walls of text that explain where an error happened but not a single hint of what was actually going on data-wise. It’s like “there was a crime at Foo bar on 37st street in Knoxville” but no hint at the kind of crime or perpetrator (a patron didn’t pay for a beer or a mass shooting?) Notice how in my scheme a function only has to provide details about its own args/locals, and it will be glued together into a coherent whole no matter the call order. 

4| Try/catch but not just for exceptions: errors too! Kind of like Rust’s scoped `try` blocks but without having to write out the question marks. The compiler simply detects that we are in a `try` block and emits error check and goto for every function which has a `! ErrorType` in its return type. It’s simple as hell but for some reason no `Result`-oriented language designer had the audacity to realize that value-based error handling can be just as ergonomic and clean as exceptions without their downsides.",1,2025-04-22 05:48:49,Linguistic-mystic
programming,1k4j2wm,moeqmd1,"I think the most important part of this article is the contrasting views on different approaches towards the end. The reason being is like most problems I don't think there is a single ""one true way"" - there's a set of trade-offs between language design and the implementation of those languages.

**Re: stack traces don't have enough runtime data**

I think this is more likely a result of most developers only ever using the default stack trace format which doesn't print function call arguments - only the function call name and location.

If we have all stack frames it should be trivial to extract the variables.

That said it feels like in these cases we are also trying to use logging as a debug mechanism (potentially instead of a debugger) which can lead to its own issues (e.g. spewing sensitive data into log files).

**Re: exception design**

I think another root cause for many problems also stems from how developers construct exceptions (will vary by language). Similar to logging, exception writing is a bit of an art in predicting what future developers will need from an informational point of view.

Consider:

```
def func(messages):
    if not 5 <= len(messages) < 10:
        raise ValueError(msg)
```

Which message is more useful?

""Incorrect messages""

""Invalid number of messages. Must provide 5-9 messages. {len(messages)} were provided.""

But the latter is more effort to write and might not even come up until years later when some other aspect of the application changes.


Whilst you can pull all the variables that led to this situation, there's a good chance that pulling out a debugger is going to be a better choice.

I'm currently working on some API tests and using Python requests' handing `response.raise_for_error()` which turns HTTP errors into exceptions. The only problem is that this isn't actually enough info when something goes wrong. Given that the API has well formed error messages including request IDs, error codes, and potentially other data, what I really should be doing is stuffing this into its own exception class with this data available for inspection. (In fact the response data might already be in the exception but the default string representation doesn't include it so I can't see it in my logs)Fc

**Re: aircraft and medical services**

It really needs emphasising that you should choose appropriate tools for the task at hand.

If you're aware of embedded medical devices running JavaScript please tell us so we can boycott that company 🙃🙃.

I suspect that most people hanging out in this subreddit are web programmers, with a healthy amount of standalone applications and embedded developers thrown in.",1,2025-04-22 10:43:33,nicholashairs
programming,1k45nqt,mo7ua3m,Sounds... lit.,-2,2025-04-21 06:37:35,BlueGoliath
programming,1k2bc40,mnvqiob,"Ah yes, the pointer receiver vs value receiver, another flaw I need to add to my list of reasons for despising Golang.",2,2025-04-19 05:02:13,Linguistic-mystic
programming,1k2bc40,mntqc1w,Databases have logs you know,0,2025-04-18 21:13:26,JanisHamburgers
programming,1k2b3gz,mo20wl1,Who comes up with these descriptions lol? Byzantine software.,-2,2025-04-20 07:10:53,lcserny
programming,1k2azhv,mnsmp4d,The accompanying talk: https://www.youtube.com/watch?v=_ahvzDzKdB0,2,2025-04-18 17:46:50,ketralnis
programming,1jz085z,mnkwrmh,What's the point in posting a 9 years old article about a certain problem in a still-evolving language without giving an update on the situation today? Were these issues addressed since then?,1,2025-04-17 13:20:25,somebodddy
